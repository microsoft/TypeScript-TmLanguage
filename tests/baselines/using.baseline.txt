original file
-----------------------------------
// using as identifier
using;
using = a;
using[x];
using[x] = a;
using.x;
using.x = a;
[using];
[using] = a;
({using});
({using} = a);
({using: x});
({using: x} = a);
({x: using});
({x: using} = a);
a = using;
a = using[x];
a = [using];
a = {using};
a = {using: x};
a = {x: using};
var using;
var using = a;
var [using];
var [using] = a;
let using;
let using = a;
let [using];
let [using] = a;
const using;
const using = a;
const [using];
const [using] = a;
function using() {}
function f(using) {}
function f(using = a) {}
function f(using[x]) {}
function f(using[x] = a) {}
function f(a = using) {}
using => {};
(using) => {};
([using]) => {};
({using}) => {};
({using: x}) => {};
({x: using}) => {};
() => using;
async using => {};
async (using) => {};
class using {}
class C extends using {}
class C<using> {}
class C { using; }
class C { static using; }
class C { readonly using; }
class C { declare using; }
class C { abstract using; }
class C { accessor using; }
class C { static accessor using; }
class C { readonly accessor using; }
class C { using() {} }
class C { static using() {} }
class C { abstract using() }
class C { get using() {} }
class C { static get using() {} }
class C { abstract get using(); }
class C { set using() {} }
class C { static set using(v) {} }
class C { abstract set using(v); }
class C { [using]; }
class C { static [using]; }
class C { readonly [using]; }
class C { declare [using]; }
class C { abstract [using]; }
class C { accessor [using]; }
class C { static accessor [using]; }
class C { readonly accessor [using]; }
class C { [using]() {} }
class C { static [using]() {} }
class C { abstract [using]() }
class C { get [using]() {} }
class C { static get [using]() {} }
class C { abstract get [using](); }
class C { set [using]() {} }
class C { static set [using](v) {} }
class C { abstract set [using](v); }
namespace using {}
namespace using.x {}
interface using {}
interface I { [using: string]: using; }
type using = never;
type X<using> = never;
enum using {}
enum E { using };
enum E { a = using };
using: {};
break using;
continue using;
switch (using) {
    case using:
}
export { using };
export { using as x };
export { x as using };
import using from "";
import * as using from "";
import { using } from "";
import { using as x } from "";
import { x as using } from "";
for (using;;);
for (using = a;;);
for (using[x];;);
for (using[x] = a;;);
for (using in a);
for (using of a);

using
x = a;

using
[x] = a;

// using as keyword
using x = a;
using x = a, y = b;

using x
= a;

using x
= a, y = b;

using x = a
    , y = b;

using x = a,
      y = b;

for (using x of a);
for (using x = a;;);
for (using x = a, y = b;;);

for (using x
= a;;);

for (using x
= a, y = b;;);

for (using x = a
         , y = b;;);

for (using x = a,
           y = b;;);

function f() {
    using x = a;
}

(() => {
    using x = a;
})

namespace N {
    using x = a;
}

class C {
    constructor() {
        using x = a;
    }
    method() {
        using x = a;
    }
    get p() {
        using x = a;
    }
    set p(v) {
        using x = a;
    }
    static {
        using x = a;
    }
}

// using as identifier, illegal syntax
using {x};
using {x: y};

// using as keyword, illegal syntax
using x;
using x, y;
using x, [y];
using x, {y};
using x, {y: z};
using x = a, y;
using x = a, [y];
using x = a, {y};
using x = a, {y: z};
declare using x;
declare using x = a;
export using x;
export using x = a;

-----------------------------------

Grammar: TypeScript.tmLanguage
-----------------------------------
>// using as identifier
 ^^
 source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
   ^^^^^^^^^^^^^^^^^^^^
   source.ts comment.line.double-slash.ts
>using;
 ^^^^^
 source.ts variable.other.readwrite.ts
      ^
      source.ts punctuation.terminator.statement.ts
>using = a;
 ^^^^^
 source.ts variable.other.readwrite.ts
      ^
      source.ts
       ^
       source.ts keyword.operator.assignment.ts
        ^
        source.ts
         ^
         source.ts variable.other.readwrite.ts
          ^
          source.ts punctuation.terminator.statement.ts
>using[x];
 ^^^^^
 source.ts variable.other.readwrite.ts
      ^
      source.ts meta.array.literal.ts meta.brace.square.ts
       ^
       source.ts meta.array.literal.ts variable.other.readwrite.ts
        ^
        source.ts meta.array.literal.ts meta.brace.square.ts
         ^
         source.ts punctuation.terminator.statement.ts
>using[x] = a;
 ^^^^^
 source.ts variable.other.readwrite.ts
      ^
      source.ts meta.array.literal.ts meta.brace.square.ts
       ^
       source.ts meta.array.literal.ts variable.other.readwrite.ts
        ^
        source.ts meta.array.literal.ts meta.brace.square.ts
         ^
         source.ts
          ^
          source.ts keyword.operator.assignment.ts
           ^
           source.ts
            ^
            source.ts variable.other.readwrite.ts
             ^
             source.ts punctuation.terminator.statement.ts
>using.x;
 ^^^^^
 source.ts variable.other.object.ts
      ^
      source.ts punctuation.accessor.ts
       ^
       source.ts support.variable.property.dom.ts
        ^
        source.ts punctuation.terminator.statement.ts
>using.x = a;
 ^^^^^
 source.ts variable.other.object.ts
      ^
      source.ts punctuation.accessor.ts
       ^
       source.ts support.variable.property.dom.ts
        ^
        source.ts
         ^
         source.ts keyword.operator.assignment.ts
          ^
          source.ts
           ^
           source.ts variable.other.readwrite.ts
            ^
            source.ts punctuation.terminator.statement.ts
>[using];
 ^
 source.ts meta.array.literal.ts meta.brace.square.ts
  ^^^^^
  source.ts meta.array.literal.ts variable.other.readwrite.ts
       ^
       source.ts meta.array.literal.ts meta.brace.square.ts
        ^
        source.ts punctuation.terminator.statement.ts
>[using] = a;
 ^
 source.ts meta.array.literal.ts meta.brace.square.ts
  ^^^^^
  source.ts meta.array.literal.ts variable.other.readwrite.ts
       ^
       source.ts meta.array.literal.ts meta.brace.square.ts
        ^
        source.ts
         ^
         source.ts keyword.operator.assignment.ts
          ^
          source.ts
           ^
           source.ts variable.other.readwrite.ts
            ^
            source.ts punctuation.terminator.statement.ts
>({using});
 ^
 source.ts meta.brace.round.ts
  ^
  source.ts meta.objectliteral.ts punctuation.definition.block.ts
   ^^^^^
   source.ts meta.objectliteral.ts meta.object.member.ts variable.other.readwrite.ts
        ^
        source.ts meta.objectliteral.ts punctuation.definition.block.ts
         ^
         source.ts meta.brace.round.ts
          ^
          source.ts punctuation.terminator.statement.ts
>({using} = a);
 ^
 source.ts meta.brace.round.ts
  ^
  source.ts meta.objectliteral.ts punctuation.definition.block.ts
   ^^^^^
   source.ts meta.objectliteral.ts meta.object.member.ts variable.other.readwrite.ts
        ^
        source.ts meta.objectliteral.ts punctuation.definition.block.ts
         ^
         source.ts
          ^
          source.ts keyword.operator.assignment.ts
           ^
           source.ts
            ^
            source.ts variable.other.readwrite.ts
             ^
             source.ts meta.brace.round.ts
              ^
              source.ts punctuation.terminator.statement.ts
>({using: x});
 ^
 source.ts meta.brace.round.ts
  ^
  source.ts meta.objectliteral.ts punctuation.definition.block.ts
   ^^^^^
   source.ts meta.objectliteral.ts meta.object.member.ts meta.object-literal.key.ts
        ^
        source.ts meta.objectliteral.ts meta.object.member.ts meta.object-literal.key.ts punctuation.separator.key-value.ts
         ^
         source.ts meta.objectliteral.ts meta.object.member.ts
          ^
          source.ts meta.objectliteral.ts meta.object.member.ts variable.other.readwrite.ts
           ^
           source.ts meta.objectliteral.ts punctuation.definition.block.ts
            ^
            source.ts meta.brace.round.ts
             ^
             source.ts punctuation.terminator.statement.ts
>({using: x} = a);
 ^
 source.ts meta.brace.round.ts
  ^
  source.ts meta.objectliteral.ts punctuation.definition.block.ts
   ^^^^^
   source.ts meta.objectliteral.ts meta.object.member.ts meta.object-literal.key.ts
        ^
        source.ts meta.objectliteral.ts meta.object.member.ts meta.object-literal.key.ts punctuation.separator.key-value.ts
         ^
         source.ts meta.objectliteral.ts meta.object.member.ts
          ^
          source.ts meta.objectliteral.ts meta.object.member.ts variable.other.readwrite.ts
           ^
           source.ts meta.objectliteral.ts punctuation.definition.block.ts
            ^
            source.ts
             ^
             source.ts keyword.operator.assignment.ts
              ^
              source.ts
               ^
               source.ts variable.other.readwrite.ts
                ^
                source.ts meta.brace.round.ts
                 ^
                 source.ts punctuation.terminator.statement.ts
>({x: using});
 ^
 source.ts meta.brace.round.ts
  ^
  source.ts meta.objectliteral.ts punctuation.definition.block.ts
   ^
   source.ts meta.objectliteral.ts meta.object.member.ts meta.object-literal.key.ts
    ^
    source.ts meta.objectliteral.ts meta.object.member.ts meta.object-literal.key.ts punctuation.separator.key-value.ts
     ^
     source.ts meta.objectliteral.ts meta.object.member.ts
      ^^^^^
      source.ts meta.objectliteral.ts meta.object.member.ts variable.other.readwrite.ts
           ^
           source.ts meta.objectliteral.ts punctuation.definition.block.ts
            ^
            source.ts meta.brace.round.ts
             ^
             source.ts punctuation.terminator.statement.ts
>({x: using} = a);
 ^
 source.ts meta.brace.round.ts
  ^
  source.ts meta.objectliteral.ts punctuation.definition.block.ts
   ^
   source.ts meta.objectliteral.ts meta.object.member.ts meta.object-literal.key.ts
    ^
    source.ts meta.objectliteral.ts meta.object.member.ts meta.object-literal.key.ts punctuation.separator.key-value.ts
     ^
     source.ts meta.objectliteral.ts meta.object.member.ts
      ^^^^^
      source.ts meta.objectliteral.ts meta.object.member.ts variable.other.readwrite.ts
           ^
           source.ts meta.objectliteral.ts punctuation.definition.block.ts
            ^
            source.ts
             ^
             source.ts keyword.operator.assignment.ts
              ^
              source.ts
               ^
               source.ts variable.other.readwrite.ts
                ^
                source.ts meta.brace.round.ts
                 ^
                 source.ts punctuation.terminator.statement.ts
>a = using;
 ^
 source.ts variable.other.readwrite.ts
  ^
  source.ts
   ^
   source.ts keyword.operator.assignment.ts
    ^
    source.ts
     ^^^^^
     source.ts variable.other.readwrite.ts
          ^
          source.ts punctuation.terminator.statement.ts
>a = using[x];
 ^
 source.ts variable.other.readwrite.ts
  ^
  source.ts
   ^
   source.ts keyword.operator.assignment.ts
    ^
    source.ts
     ^^^^^
     source.ts variable.other.readwrite.ts
          ^
          source.ts meta.array.literal.ts meta.brace.square.ts
           ^
           source.ts meta.array.literal.ts variable.other.readwrite.ts
            ^
            source.ts meta.array.literal.ts meta.brace.square.ts
             ^
             source.ts punctuation.terminator.statement.ts
>a = [using];
 ^
 source.ts variable.other.readwrite.ts
  ^
  source.ts
   ^
   source.ts keyword.operator.assignment.ts
    ^
    source.ts meta.array.literal.ts
     ^
     source.ts meta.array.literal.ts meta.brace.square.ts
      ^^^^^
      source.ts meta.array.literal.ts variable.other.readwrite.ts
           ^
           source.ts meta.array.literal.ts meta.brace.square.ts
            ^
            source.ts punctuation.terminator.statement.ts
>a = {using};
 ^
 source.ts variable.other.readwrite.ts
  ^
  source.ts
   ^
   source.ts keyword.operator.assignment.ts
    ^
    source.ts meta.objectliteral.ts
     ^
     source.ts meta.objectliteral.ts punctuation.definition.block.ts
      ^^^^^
      source.ts meta.objectliteral.ts meta.object.member.ts variable.other.readwrite.ts
           ^
           source.ts meta.objectliteral.ts punctuation.definition.block.ts
            ^
            source.ts punctuation.terminator.statement.ts
>a = {using: x};
 ^
 source.ts variable.other.readwrite.ts
  ^
  source.ts
   ^
   source.ts keyword.operator.assignment.ts
    ^
    source.ts meta.objectliteral.ts
     ^
     source.ts meta.objectliteral.ts punctuation.definition.block.ts
      ^^^^^
      source.ts meta.objectliteral.ts meta.object.member.ts meta.object-literal.key.ts
           ^
           source.ts meta.objectliteral.ts meta.object.member.ts meta.object-literal.key.ts punctuation.separator.key-value.ts
            ^
            source.ts meta.objectliteral.ts meta.object.member.ts
             ^
             source.ts meta.objectliteral.ts meta.object.member.ts variable.other.readwrite.ts
              ^
              source.ts meta.objectliteral.ts punctuation.definition.block.ts
               ^
               source.ts punctuation.terminator.statement.ts
>a = {x: using};
 ^
 source.ts variable.other.readwrite.ts
  ^
  source.ts
   ^
   source.ts keyword.operator.assignment.ts
    ^
    source.ts meta.objectliteral.ts
     ^
     source.ts meta.objectliteral.ts punctuation.definition.block.ts
      ^
      source.ts meta.objectliteral.ts meta.object.member.ts meta.object-literal.key.ts
       ^
       source.ts meta.objectliteral.ts meta.object.member.ts meta.object-literal.key.ts punctuation.separator.key-value.ts
        ^
        source.ts meta.objectliteral.ts meta.object.member.ts
         ^^^^^
         source.ts meta.objectliteral.ts meta.object.member.ts variable.other.readwrite.ts
              ^
              source.ts meta.objectliteral.ts punctuation.definition.block.ts
               ^
               source.ts punctuation.terminator.statement.ts
>var using;
 ^^^
 source.ts meta.var.expr.ts storage.type.ts
    ^
    source.ts meta.var.expr.ts
     ^^^^^
     source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.readwrite.ts
          ^
          source.ts punctuation.terminator.statement.ts
>var using = a;
 ^^^
 source.ts meta.var.expr.ts storage.type.ts
    ^
    source.ts meta.var.expr.ts
     ^^^^^
     source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.readwrite.ts
          ^
          source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
           ^
           source.ts meta.var.expr.ts keyword.operator.assignment.ts
            ^
            source.ts meta.var.expr.ts
             ^
             source.ts meta.var.expr.ts variable.other.readwrite.ts
              ^
              source.ts punctuation.terminator.statement.ts
>var [using];
 ^^^
 source.ts meta.var.expr.ts storage.type.ts
    ^
    source.ts meta.var.expr.ts
     ^
     source.ts meta.var.expr.ts meta.array-binding-pattern-variable.ts punctuation.definition.binding-pattern.array.ts
      ^^^^^
      source.ts meta.var.expr.ts meta.array-binding-pattern-variable.ts meta.definition.variable.ts variable.other.readwrite.ts
           ^
           source.ts meta.var.expr.ts meta.array-binding-pattern-variable.ts punctuation.definition.binding-pattern.array.ts
            ^
            source.ts punctuation.terminator.statement.ts
>var [using] = a;
 ^^^
 source.ts meta.var.expr.ts storage.type.ts
    ^
    source.ts meta.var.expr.ts
     ^
     source.ts meta.var.expr.ts meta.array-binding-pattern-variable.ts punctuation.definition.binding-pattern.array.ts
      ^^^^^
      source.ts meta.var.expr.ts meta.array-binding-pattern-variable.ts meta.definition.variable.ts variable.other.readwrite.ts
           ^
           source.ts meta.var.expr.ts meta.array-binding-pattern-variable.ts punctuation.definition.binding-pattern.array.ts
            ^
            source.ts meta.var.expr.ts meta.array-binding-pattern-variable.ts
             ^
             source.ts meta.var.expr.ts keyword.operator.assignment.ts
              ^
              source.ts meta.var.expr.ts
               ^
               source.ts meta.var.expr.ts variable.other.readwrite.ts
                ^
                source.ts punctuation.terminator.statement.ts
>let using;
 ^^^
 source.ts meta.var.expr.ts storage.type.ts
    ^
    source.ts meta.var.expr.ts
     ^^^^^
     source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.readwrite.ts
          ^
          source.ts punctuation.terminator.statement.ts
>let using = a;
 ^^^
 source.ts meta.var.expr.ts storage.type.ts
    ^
    source.ts meta.var.expr.ts
     ^^^^^
     source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.readwrite.ts
          ^
          source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
           ^
           source.ts meta.var.expr.ts keyword.operator.assignment.ts
            ^
            source.ts meta.var.expr.ts
             ^
             source.ts meta.var.expr.ts variable.other.readwrite.ts
              ^
              source.ts punctuation.terminator.statement.ts
>let [using];
 ^^^
 source.ts meta.var.expr.ts storage.type.ts
    ^
    source.ts meta.var.expr.ts
     ^
     source.ts meta.var.expr.ts meta.array-binding-pattern-variable.ts punctuation.definition.binding-pattern.array.ts
      ^^^^^
      source.ts meta.var.expr.ts meta.array-binding-pattern-variable.ts meta.definition.variable.ts variable.other.readwrite.ts
           ^
           source.ts meta.var.expr.ts meta.array-binding-pattern-variable.ts punctuation.definition.binding-pattern.array.ts
            ^
            source.ts punctuation.terminator.statement.ts
>let [using] = a;
 ^^^
 source.ts meta.var.expr.ts storage.type.ts
    ^
    source.ts meta.var.expr.ts
     ^
     source.ts meta.var.expr.ts meta.array-binding-pattern-variable.ts punctuation.definition.binding-pattern.array.ts
      ^^^^^
      source.ts meta.var.expr.ts meta.array-binding-pattern-variable.ts meta.definition.variable.ts variable.other.readwrite.ts
           ^
           source.ts meta.var.expr.ts meta.array-binding-pattern-variable.ts punctuation.definition.binding-pattern.array.ts
            ^
            source.ts meta.var.expr.ts meta.array-binding-pattern-variable.ts
             ^
             source.ts meta.var.expr.ts keyword.operator.assignment.ts
              ^
              source.ts meta.var.expr.ts
               ^
               source.ts meta.var.expr.ts variable.other.readwrite.ts
                ^
                source.ts punctuation.terminator.statement.ts
>const using;
 ^^^^^
 source.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.var.expr.ts
       ^^^^^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
            ^
            source.ts punctuation.terminator.statement.ts
>const using = a;
 ^^^^^
 source.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.var.expr.ts
       ^^^^^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
            ^
            source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
             ^
             source.ts meta.var.expr.ts keyword.operator.assignment.ts
              ^
              source.ts meta.var.expr.ts
               ^
               source.ts meta.var.expr.ts variable.other.readwrite.ts
                ^
                source.ts punctuation.terminator.statement.ts
>const [using];
 ^^^^^
 source.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.var.expr.ts
       ^
       source.ts meta.var.expr.ts meta.array-binding-pattern-variable.ts punctuation.definition.binding-pattern.array.ts
        ^^^^^
        source.ts meta.var.expr.ts meta.array-binding-pattern-variable.ts meta.definition.variable.ts variable.other.constant.ts
             ^
             source.ts meta.var.expr.ts meta.array-binding-pattern-variable.ts punctuation.definition.binding-pattern.array.ts
              ^
              source.ts punctuation.terminator.statement.ts
>const [using] = a;
 ^^^^^
 source.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.var.expr.ts
       ^
       source.ts meta.var.expr.ts meta.array-binding-pattern-variable.ts punctuation.definition.binding-pattern.array.ts
        ^^^^^
        source.ts meta.var.expr.ts meta.array-binding-pattern-variable.ts meta.definition.variable.ts variable.other.constant.ts
             ^
             source.ts meta.var.expr.ts meta.array-binding-pattern-variable.ts punctuation.definition.binding-pattern.array.ts
              ^
              source.ts meta.var.expr.ts meta.array-binding-pattern-variable.ts
               ^
               source.ts meta.var.expr.ts keyword.operator.assignment.ts
                ^
                source.ts meta.var.expr.ts
                 ^
                 source.ts meta.var.expr.ts variable.other.readwrite.ts
                  ^
                  source.ts punctuation.terminator.statement.ts
>function using() {}
 ^^^^^^^^
 source.ts meta.function.ts storage.type.function.ts
         ^
         source.ts meta.function.ts
          ^^^^^
          source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts
               ^
               source.ts meta.function.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                ^
                source.ts meta.function.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                 ^
                 source.ts meta.function.ts
                  ^
                  source.ts meta.function.ts meta.block.ts punctuation.definition.block.ts
                   ^
                   source.ts meta.function.ts meta.block.ts punctuation.definition.block.ts
>function f(using) {}
 ^^^^^^^^
 source.ts meta.function.ts storage.type.function.ts
         ^
         source.ts meta.function.ts
          ^
          source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts
           ^
           source.ts meta.function.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
            ^^^^^
            source.ts meta.function.ts meta.parameters.ts variable.parameter.ts
                 ^
                 source.ts meta.function.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                  ^
                  source.ts meta.function.ts
                   ^
                   source.ts meta.function.ts meta.block.ts punctuation.definition.block.ts
                    ^
                    source.ts meta.function.ts meta.block.ts punctuation.definition.block.ts
>function f(using = a) {}
 ^^^^^^^^
 source.ts meta.function.ts storage.type.function.ts
         ^
         source.ts meta.function.ts
          ^
          source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts
           ^
           source.ts meta.function.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
            ^^^^^
            source.ts meta.function.ts meta.parameters.ts variable.parameter.ts
                 ^
                 source.ts meta.function.ts meta.parameters.ts
                  ^
                  source.ts meta.function.ts meta.parameters.ts keyword.operator.assignment.ts
                   ^
                   source.ts meta.function.ts meta.parameters.ts
                    ^
                    source.ts meta.function.ts meta.parameters.ts variable.other.readwrite.ts
                     ^
                     source.ts meta.function.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                      ^
                      source.ts meta.function.ts
                       ^
                       source.ts meta.function.ts meta.block.ts punctuation.definition.block.ts
                        ^
                        source.ts meta.function.ts meta.block.ts punctuation.definition.block.ts
>function f(using[x]) {}
 ^^^^^^^^
 source.ts meta.function.ts storage.type.function.ts
         ^
         source.ts meta.function.ts
          ^
          source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts
           ^
           source.ts meta.function.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
            ^^^^^
            source.ts meta.function.ts meta.parameters.ts variable.parameter.ts
                 ^
                 source.ts meta.function.ts meta.parameters.ts meta.paramter.array-binding-pattern.ts punctuation.definition.binding-pattern.array.ts
                  ^
                  source.ts meta.function.ts meta.parameters.ts meta.paramter.array-binding-pattern.ts variable.parameter.ts
                   ^
                   source.ts meta.function.ts meta.parameters.ts meta.paramter.array-binding-pattern.ts punctuation.definition.binding-pattern.array.ts
                    ^
                    source.ts meta.function.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                     ^
                     source.ts meta.function.ts
                      ^
                      source.ts meta.function.ts meta.block.ts punctuation.definition.block.ts
                       ^
                       source.ts meta.function.ts meta.block.ts punctuation.definition.block.ts
>function f(using[x] = a) {}
 ^^^^^^^^
 source.ts meta.function.ts storage.type.function.ts
         ^
         source.ts meta.function.ts
          ^
          source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts
           ^
           source.ts meta.function.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
            ^^^^^
            source.ts meta.function.ts meta.parameters.ts variable.parameter.ts
                 ^
                 source.ts meta.function.ts meta.parameters.ts meta.paramter.array-binding-pattern.ts punctuation.definition.binding-pattern.array.ts
                  ^
                  source.ts meta.function.ts meta.parameters.ts meta.paramter.array-binding-pattern.ts variable.parameter.ts
                   ^
                   source.ts meta.function.ts meta.parameters.ts meta.paramter.array-binding-pattern.ts punctuation.definition.binding-pattern.array.ts
                    ^
                    source.ts meta.function.ts meta.parameters.ts
                     ^
                     source.ts meta.function.ts meta.parameters.ts keyword.operator.assignment.ts
                      ^
                      source.ts meta.function.ts meta.parameters.ts
                       ^
                       source.ts meta.function.ts meta.parameters.ts variable.other.readwrite.ts
                        ^
                        source.ts meta.function.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                         ^
                         source.ts meta.function.ts
                          ^
                          source.ts meta.function.ts meta.block.ts punctuation.definition.block.ts
                           ^
                           source.ts meta.function.ts meta.block.ts punctuation.definition.block.ts
>function f(a = using) {}
 ^^^^^^^^
 source.ts meta.function.ts storage.type.function.ts
         ^
         source.ts meta.function.ts
          ^
          source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts
           ^
           source.ts meta.function.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
            ^
            source.ts meta.function.ts meta.parameters.ts variable.parameter.ts
             ^
             source.ts meta.function.ts meta.parameters.ts
              ^
              source.ts meta.function.ts meta.parameters.ts keyword.operator.assignment.ts
               ^
               source.ts meta.function.ts meta.parameters.ts
                ^^^^^
                source.ts meta.function.ts meta.parameters.ts variable.other.readwrite.ts
                     ^
                     source.ts meta.function.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                      ^
                      source.ts meta.function.ts
                       ^
                       source.ts meta.function.ts meta.block.ts punctuation.definition.block.ts
                        ^
                        source.ts meta.function.ts meta.block.ts punctuation.definition.block.ts
>using => {};
 ^^^^^
 source.ts meta.arrow.ts variable.parameter.ts
      ^
      source.ts meta.arrow.ts
       ^^
       source.ts meta.arrow.ts storage.type.function.arrow.ts
         ^
         source.ts meta.arrow.ts
          ^
          source.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts
           ^
           source.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts
            ^
            source.ts punctuation.terminator.statement.ts
>(using) => {};
 ^
 source.ts meta.arrow.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
  ^^^^^
  source.ts meta.arrow.ts meta.parameters.ts variable.parameter.ts
       ^
       source.ts meta.arrow.ts meta.parameters.ts punctuation.definition.parameters.end.ts
        ^
        source.ts meta.arrow.ts
         ^^
         source.ts meta.arrow.ts storage.type.function.arrow.ts
           ^
           source.ts meta.arrow.ts
            ^
            source.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts
             ^
             source.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts
              ^
              source.ts punctuation.terminator.statement.ts
>([using]) => {};
 ^
 source.ts meta.arrow.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
  ^
  source.ts meta.arrow.ts meta.parameters.ts meta.paramter.array-binding-pattern.ts punctuation.definition.binding-pattern.array.ts
   ^^^^^
   source.ts meta.arrow.ts meta.parameters.ts meta.paramter.array-binding-pattern.ts variable.parameter.ts
        ^
        source.ts meta.arrow.ts meta.parameters.ts meta.paramter.array-binding-pattern.ts punctuation.definition.binding-pattern.array.ts
         ^
         source.ts meta.arrow.ts meta.parameters.ts punctuation.definition.parameters.end.ts
          ^
          source.ts meta.arrow.ts
           ^^
           source.ts meta.arrow.ts storage.type.function.arrow.ts
             ^
             source.ts meta.arrow.ts
              ^
              source.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts
               ^
               source.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts
                ^
                source.ts punctuation.terminator.statement.ts
>({using}) => {};
 ^
 source.ts meta.arrow.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
  ^
  source.ts meta.arrow.ts meta.parameters.ts meta.parameter.object-binding-pattern.ts punctuation.definition.binding-pattern.object.ts
   ^^^^^
   source.ts meta.arrow.ts meta.parameters.ts meta.parameter.object-binding-pattern.ts variable.parameter.ts
        ^
        source.ts meta.arrow.ts meta.parameters.ts meta.parameter.object-binding-pattern.ts punctuation.definition.binding-pattern.object.ts
         ^
         source.ts meta.arrow.ts meta.parameters.ts punctuation.definition.parameters.end.ts
          ^
          source.ts meta.arrow.ts
           ^^
           source.ts meta.arrow.ts storage.type.function.arrow.ts
             ^
             source.ts meta.arrow.ts
              ^
              source.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts
               ^
               source.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts
                ^
                source.ts punctuation.terminator.statement.ts
>({using: x}) => {};
 ^
 source.ts meta.arrow.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
  ^
  source.ts meta.arrow.ts meta.parameters.ts meta.parameter.object-binding-pattern.ts punctuation.definition.binding-pattern.object.ts
   ^^^^^
   source.ts meta.arrow.ts meta.parameters.ts meta.parameter.object-binding-pattern.ts variable.object.property.ts
        ^
        source.ts meta.arrow.ts meta.parameters.ts meta.parameter.object-binding-pattern.ts punctuation.destructuring.ts
         ^
         source.ts meta.arrow.ts meta.parameters.ts meta.parameter.object-binding-pattern.ts
          ^
          source.ts meta.arrow.ts meta.parameters.ts meta.parameter.object-binding-pattern.ts variable.parameter.ts
           ^
           source.ts meta.arrow.ts meta.parameters.ts meta.parameter.object-binding-pattern.ts punctuation.definition.binding-pattern.object.ts
            ^
            source.ts meta.arrow.ts meta.parameters.ts punctuation.definition.parameters.end.ts
             ^
             source.ts meta.arrow.ts
              ^^
              source.ts meta.arrow.ts storage.type.function.arrow.ts
                ^
                source.ts meta.arrow.ts
                 ^
                 source.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts
                  ^
                  source.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts
                   ^
                   source.ts punctuation.terminator.statement.ts
>({x: using}) => {};
 ^
 source.ts meta.arrow.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
  ^
  source.ts meta.arrow.ts meta.parameters.ts meta.parameter.object-binding-pattern.ts punctuation.definition.binding-pattern.object.ts
   ^
   source.ts meta.arrow.ts meta.parameters.ts meta.parameter.object-binding-pattern.ts variable.object.property.ts
    ^
    source.ts meta.arrow.ts meta.parameters.ts meta.parameter.object-binding-pattern.ts punctuation.destructuring.ts
     ^
     source.ts meta.arrow.ts meta.parameters.ts meta.parameter.object-binding-pattern.ts
      ^^^^^
      source.ts meta.arrow.ts meta.parameters.ts meta.parameter.object-binding-pattern.ts variable.parameter.ts
           ^
           source.ts meta.arrow.ts meta.parameters.ts meta.parameter.object-binding-pattern.ts punctuation.definition.binding-pattern.object.ts
            ^
            source.ts meta.arrow.ts meta.parameters.ts punctuation.definition.parameters.end.ts
             ^
             source.ts meta.arrow.ts
              ^^
              source.ts meta.arrow.ts storage.type.function.arrow.ts
                ^
                source.ts meta.arrow.ts
                 ^
                 source.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts
                  ^
                  source.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts
                   ^
                   source.ts punctuation.terminator.statement.ts
>() => using;
 ^
 source.ts meta.arrow.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
  ^
  source.ts meta.arrow.ts meta.parameters.ts punctuation.definition.parameters.end.ts
   ^
   source.ts meta.arrow.ts
    ^^
    source.ts meta.arrow.ts storage.type.function.arrow.ts
      ^
      source.ts meta.arrow.ts
       ^^^^^
       source.ts variable.other.readwrite.ts
            ^
            source.ts punctuation.terminator.statement.ts
>async using => {};
 ^^^^^
 source.ts meta.arrow.ts storage.modifier.async.ts
      ^
      source.ts meta.arrow.ts
       ^^^^^
       source.ts meta.arrow.ts variable.parameter.ts
            ^
            source.ts meta.arrow.ts
             ^^
             source.ts meta.arrow.ts storage.type.function.arrow.ts
               ^
               source.ts meta.arrow.ts
                ^
                source.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts
                 ^
                 source.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts
                  ^
                  source.ts punctuation.terminator.statement.ts
>async (using) => {};
 ^^^^^
 source.ts meta.arrow.ts storage.modifier.async.ts
      ^
      source.ts meta.arrow.ts
       ^
       source.ts meta.arrow.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
        ^^^^^
        source.ts meta.arrow.ts meta.parameters.ts variable.parameter.ts
             ^
             source.ts meta.arrow.ts meta.parameters.ts punctuation.definition.parameters.end.ts
              ^
              source.ts meta.arrow.ts
               ^^
               source.ts meta.arrow.ts storage.type.function.arrow.ts
                 ^
                 source.ts meta.arrow.ts
                  ^
                  source.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts
                   ^
                   source.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts
                    ^
                    source.ts punctuation.terminator.statement.ts
>class using {}
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^^^^^
       source.ts meta.class.ts entity.name.type.class.ts
            ^
            source.ts meta.class.ts
             ^
             source.ts meta.class.ts punctuation.definition.block.ts
              ^
              source.ts meta.class.ts punctuation.definition.block.ts
>class C extends using {}
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^^^^^^^
         source.ts meta.class.ts storage.modifier.ts
                ^
                source.ts meta.class.ts
                 ^^^^^
                 source.ts meta.class.ts entity.other.inherited-class.ts
                      ^
                      source.ts meta.class.ts
                       ^
                       source.ts meta.class.ts punctuation.definition.block.ts
                        ^
                        source.ts meta.class.ts punctuation.definition.block.ts
>class C<using> {}
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts meta.type.parameters.ts punctuation.definition.typeparameters.begin.ts
         ^^^^^
         source.ts meta.class.ts meta.type.parameters.ts entity.name.type.ts
              ^
              source.ts meta.class.ts meta.type.parameters.ts punctuation.definition.typeparameters.end.ts
               ^
               source.ts meta.class.ts
                ^
                source.ts meta.class.ts punctuation.definition.block.ts
                 ^
                 source.ts meta.class.ts punctuation.definition.block.ts
>class C { using; }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts meta.field.declaration.ts
           ^^^^^
           source.ts meta.class.ts meta.field.declaration.ts meta.definition.property.ts variable.object.property.ts
                ^
                source.ts meta.class.ts punctuation.terminator.statement.ts
                 ^
                 source.ts meta.class.ts
                  ^
                  source.ts meta.class.ts punctuation.definition.block.ts
>class C { static using; }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^
           source.ts meta.class.ts storage.modifier.ts
                 ^
                 source.ts meta.class.ts meta.field.declaration.ts
                  ^^^^^
                  source.ts meta.class.ts meta.field.declaration.ts meta.definition.property.ts variable.object.property.ts
                       ^
                       source.ts meta.class.ts punctuation.terminator.statement.ts
                        ^
                        source.ts meta.class.ts
                         ^
                         source.ts meta.class.ts punctuation.definition.block.ts
>class C { readonly using; }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^^^
           source.ts meta.class.ts meta.field.declaration.ts storage.modifier.ts
                   ^
                   source.ts meta.class.ts meta.field.declaration.ts
                    ^^^^^
                    source.ts meta.class.ts meta.field.declaration.ts meta.definition.property.ts variable.object.property.ts
                         ^
                         source.ts meta.class.ts punctuation.terminator.statement.ts
                          ^
                          source.ts meta.class.ts
                           ^
                           source.ts meta.class.ts punctuation.definition.block.ts
>class C { declare using; }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^^
           source.ts meta.class.ts storage.modifier.ts
                  ^
                  source.ts meta.class.ts meta.field.declaration.ts
                   ^^^^^
                   source.ts meta.class.ts meta.field.declaration.ts meta.definition.property.ts variable.object.property.ts
                        ^
                        source.ts meta.class.ts punctuation.terminator.statement.ts
                         ^
                         source.ts meta.class.ts
                          ^
                          source.ts meta.class.ts punctuation.definition.block.ts
>class C { abstract using; }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^^^
           source.ts meta.class.ts storage.modifier.ts
                   ^
                   source.ts meta.class.ts meta.field.declaration.ts
                    ^^^^^
                    source.ts meta.class.ts meta.field.declaration.ts meta.definition.property.ts variable.object.property.ts
                         ^
                         source.ts meta.class.ts punctuation.terminator.statement.ts
                          ^
                          source.ts meta.class.ts
                           ^
                           source.ts meta.class.ts punctuation.definition.block.ts
>class C { accessor using; }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^^^
           source.ts meta.class.ts storage.type.property.ts
                   ^
                   source.ts meta.class.ts meta.field.declaration.ts
                    ^^^^^
                    source.ts meta.class.ts meta.field.declaration.ts meta.definition.property.ts variable.object.property.ts
                         ^
                         source.ts meta.class.ts punctuation.terminator.statement.ts
                          ^
                          source.ts meta.class.ts
                           ^
                           source.ts meta.class.ts punctuation.definition.block.ts
>class C { static accessor using; }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^
           source.ts meta.class.ts storage.modifier.ts
                 ^
                 source.ts meta.class.ts
                  ^^^^^^^^
                  source.ts meta.class.ts storage.type.property.ts
                          ^
                          source.ts meta.class.ts meta.field.declaration.ts
                           ^^^^^
                           source.ts meta.class.ts meta.field.declaration.ts meta.definition.property.ts variable.object.property.ts
                                ^
                                source.ts meta.class.ts punctuation.terminator.statement.ts
                                 ^
                                 source.ts meta.class.ts
                                  ^
                                  source.ts meta.class.ts punctuation.definition.block.ts
>class C { readonly accessor using; }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^^^
           source.ts meta.class.ts storage.modifier.ts
                   ^
                   source.ts meta.class.ts
                    ^^^^^^^^
                    source.ts meta.class.ts storage.type.property.ts
                            ^
                            source.ts meta.class.ts meta.field.declaration.ts
                             ^^^^^
                             source.ts meta.class.ts meta.field.declaration.ts meta.definition.property.ts variable.object.property.ts
                                  ^
                                  source.ts meta.class.ts punctuation.terminator.statement.ts
                                   ^
                                   source.ts meta.class.ts
                                    ^
                                    source.ts meta.class.ts punctuation.definition.block.ts
>class C { using() {} }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts meta.method.declaration.ts
           ^^^^^
           source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts
                ^
                source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                 ^
                 source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                  ^
                  source.ts meta.class.ts meta.method.declaration.ts
                   ^
                   source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                    ^
                    source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                     ^
                     source.ts meta.class.ts
                      ^
                      source.ts meta.class.ts punctuation.definition.block.ts
>class C { static using() {} }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^
           source.ts meta.class.ts storage.modifier.ts
                 ^
                 source.ts meta.class.ts
                  ^^^^^
                  source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts
                       ^
                       source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                        ^
                        source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                         ^
                         source.ts meta.class.ts meta.method.declaration.ts
                          ^
                          source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                           ^
                           source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                            ^
                            source.ts meta.class.ts
                             ^
                             source.ts meta.class.ts punctuation.definition.block.ts
>class C { abstract using() }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^^^
           source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts
                   ^
                   source.ts meta.class.ts meta.method.declaration.ts
                    ^^^^^
                    source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts
                         ^
                         source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                          ^
                          source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                           ^
                           source.ts meta.class.ts meta.method.declaration.ts
                            ^
                            source.ts meta.class.ts punctuation.definition.block.ts
>class C { get using() {} }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^
           source.ts meta.class.ts meta.method.declaration.ts storage.type.property.ts
              ^
              source.ts meta.class.ts meta.method.declaration.ts
               ^^^^^
               source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts
                    ^
                    source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                     ^
                     source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                      ^
                      source.ts meta.class.ts meta.method.declaration.ts
                       ^
                       source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                        ^
                        source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                         ^
                         source.ts meta.class.ts
                          ^
                          source.ts meta.class.ts punctuation.definition.block.ts
>class C { static get using() {} }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^
           source.ts meta.class.ts storage.modifier.ts
                 ^
                 source.ts meta.class.ts
                  ^^^
                  source.ts meta.class.ts meta.method.declaration.ts storage.type.property.ts
                     ^
                     source.ts meta.class.ts meta.method.declaration.ts
                      ^^^^^
                      source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts
                           ^
                           source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                            ^
                            source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                             ^
                             source.ts meta.class.ts meta.method.declaration.ts
                              ^
                              source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                               ^
                               source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                                ^
                                source.ts meta.class.ts
                                 ^
                                 source.ts meta.class.ts punctuation.definition.block.ts
>class C { abstract get using(); }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^^^
           source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts
                   ^
                   source.ts meta.class.ts meta.method.declaration.ts
                    ^^^
                    source.ts meta.class.ts meta.method.declaration.ts storage.type.property.ts
                       ^
                       source.ts meta.class.ts meta.method.declaration.ts
                        ^^^^^
                        source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts
                             ^
                             source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                              ^
                              source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                               ^
                               source.ts meta.class.ts punctuation.terminator.statement.ts
                                ^
                                source.ts meta.class.ts
                                 ^
                                 source.ts meta.class.ts punctuation.definition.block.ts
>class C { set using() {} }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^
           source.ts meta.class.ts meta.method.declaration.ts storage.type.property.ts
              ^
              source.ts meta.class.ts meta.method.declaration.ts
               ^^^^^
               source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts
                    ^
                    source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                     ^
                     source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                      ^
                      source.ts meta.class.ts meta.method.declaration.ts
                       ^
                       source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                        ^
                        source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                         ^
                         source.ts meta.class.ts
                          ^
                          source.ts meta.class.ts punctuation.definition.block.ts
>class C { static set using(v) {} }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^
           source.ts meta.class.ts storage.modifier.ts
                 ^
                 source.ts meta.class.ts
                  ^^^
                  source.ts meta.class.ts meta.method.declaration.ts storage.type.property.ts
                     ^
                     source.ts meta.class.ts meta.method.declaration.ts
                      ^^^^^
                      source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts
                           ^
                           source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                            ^
                            source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts variable.parameter.ts
                             ^
                             source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                              ^
                              source.ts meta.class.ts meta.method.declaration.ts
                               ^
                               source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                                ^
                                source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                                 ^
                                 source.ts meta.class.ts
                                  ^
                                  source.ts meta.class.ts punctuation.definition.block.ts
>class C { abstract set using(v); }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^^^
           source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts
                   ^
                   source.ts meta.class.ts meta.method.declaration.ts
                    ^^^
                    source.ts meta.class.ts meta.method.declaration.ts storage.type.property.ts
                       ^
                       source.ts meta.class.ts meta.method.declaration.ts
                        ^^^^^
                        source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts
                             ^
                             source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                              ^
                              source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts variable.parameter.ts
                               ^
                               source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                                ^
                                source.ts meta.class.ts punctuation.terminator.statement.ts
                                 ^
                                 source.ts meta.class.ts
                                  ^
                                  source.ts meta.class.ts punctuation.definition.block.ts
>class C { [using]; }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts
           ^
           source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts meta.brace.square.ts
            ^^^^^
            source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts variable.other.readwrite.ts
                 ^
                 source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts meta.brace.square.ts
                  ^
                  source.ts meta.class.ts punctuation.terminator.statement.ts
                   ^
                   source.ts meta.class.ts
                    ^
                    source.ts meta.class.ts punctuation.definition.block.ts
>class C { static [using]; }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^
           source.ts meta.class.ts storage.modifier.ts
                 ^
                 source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts
                  ^
                  source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts meta.brace.square.ts
                   ^^^^^
                   source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts variable.other.readwrite.ts
                        ^
                        source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts meta.brace.square.ts
                         ^
                         source.ts meta.class.ts punctuation.terminator.statement.ts
                          ^
                          source.ts meta.class.ts
                           ^
                           source.ts meta.class.ts punctuation.definition.block.ts
>class C { readonly [using]; }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^^^
           source.ts meta.class.ts meta.field.declaration.ts storage.modifier.ts
                   ^
                   source.ts meta.class.ts meta.field.declaration.ts
                    ^
                    source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts meta.brace.square.ts
                     ^^^^^
                     source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts variable.other.readwrite.ts
                          ^
                          source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts meta.brace.square.ts
                           ^
                           source.ts meta.class.ts punctuation.terminator.statement.ts
                            ^
                            source.ts meta.class.ts
                             ^
                             source.ts meta.class.ts punctuation.definition.block.ts
>class C { declare [using]; }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^^
           source.ts meta.class.ts storage.modifier.ts
                  ^
                  source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts
                   ^
                   source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts meta.brace.square.ts
                    ^^^^^
                    source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts variable.other.readwrite.ts
                         ^
                         source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts meta.brace.square.ts
                          ^
                          source.ts meta.class.ts punctuation.terminator.statement.ts
                           ^
                           source.ts meta.class.ts
                            ^
                            source.ts meta.class.ts punctuation.definition.block.ts
>class C { abstract [using]; }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^^^
           source.ts meta.class.ts storage.modifier.ts
                   ^
                   source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts
                    ^
                    source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts meta.brace.square.ts
                     ^^^^^
                     source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts variable.other.readwrite.ts
                          ^
                          source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts meta.brace.square.ts
                           ^
                           source.ts meta.class.ts punctuation.terminator.statement.ts
                            ^
                            source.ts meta.class.ts
                             ^
                             source.ts meta.class.ts punctuation.definition.block.ts
>class C { accessor [using]; }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^^^
           source.ts meta.class.ts storage.type.property.ts
                   ^
                   source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts
                    ^
                    source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts meta.brace.square.ts
                     ^^^^^
                     source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts variable.other.readwrite.ts
                          ^
                          source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts meta.brace.square.ts
                           ^
                           source.ts meta.class.ts punctuation.terminator.statement.ts
                            ^
                            source.ts meta.class.ts
                             ^
                             source.ts meta.class.ts punctuation.definition.block.ts
>class C { static accessor [using]; }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^
           source.ts meta.class.ts storage.modifier.ts
                 ^
                 source.ts meta.class.ts
                  ^^^^^^^^
                  source.ts meta.class.ts storage.type.property.ts
                          ^
                          source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts
                           ^
                           source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts meta.brace.square.ts
                            ^^^^^
                            source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts variable.other.readwrite.ts
                                 ^
                                 source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts meta.brace.square.ts
                                  ^
                                  source.ts meta.class.ts punctuation.terminator.statement.ts
                                   ^
                                   source.ts meta.class.ts
                                    ^
                                    source.ts meta.class.ts punctuation.definition.block.ts
>class C { readonly accessor [using]; }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^^^
           source.ts meta.class.ts storage.modifier.ts
                   ^
                   source.ts meta.class.ts
                    ^^^^^^^^
                    source.ts meta.class.ts storage.type.property.ts
                            ^
                            source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts
                             ^
                             source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts meta.brace.square.ts
                              ^^^^^
                              source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts variable.other.readwrite.ts
                                   ^
                                   source.ts meta.class.ts meta.field.declaration.ts meta.array.literal.ts meta.brace.square.ts
                                    ^
                                    source.ts meta.class.ts punctuation.terminator.statement.ts
                                     ^
                                     source.ts meta.class.ts
                                      ^
                                      source.ts meta.class.ts punctuation.definition.block.ts
>class C { [using]() {} }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts meta.method.declaration.ts
           ^
           source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts meta.brace.square.ts
            ^^^^^
            source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts variable.other.readwrite.ts
                 ^
                 source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts meta.brace.square.ts
                  ^
                  source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                   ^
                   source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                    ^
                    source.ts meta.class.ts meta.method.declaration.ts
                     ^
                     source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                      ^
                      source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                       ^
                       source.ts meta.class.ts
                        ^
                        source.ts meta.class.ts punctuation.definition.block.ts
>class C { static [using]() {} }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^
           source.ts meta.class.ts storage.modifier.ts
                 ^
                 source.ts meta.class.ts meta.array.literal.ts
                  ^
                  source.ts meta.class.ts meta.array.literal.ts meta.brace.square.ts
                   ^^^^^
                   source.ts meta.class.ts meta.array.literal.ts variable.other.readwrite.ts
                        ^
                        source.ts meta.class.ts meta.array.literal.ts meta.brace.square.ts
                         ^
                         source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                          ^
                          source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                           ^
                           source.ts meta.class.ts meta.method.declaration.ts
                            ^
                            source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                             ^
                             source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                              ^
                              source.ts meta.class.ts
                               ^
                               source.ts meta.class.ts punctuation.definition.block.ts
>class C { abstract [using]() }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^^^
           source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts
                   ^
                   source.ts meta.class.ts meta.method.declaration.ts
                    ^
                    source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts meta.brace.square.ts
                     ^^^^^
                     source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts variable.other.readwrite.ts
                          ^
                          source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts meta.brace.square.ts
                           ^
                           source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                            ^
                            source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                             ^
                             source.ts meta.class.ts meta.method.declaration.ts
                              ^
                              source.ts meta.class.ts punctuation.definition.block.ts
>class C { get [using]() {} }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^
           source.ts meta.class.ts meta.method.declaration.ts storage.type.property.ts
              ^
              source.ts meta.class.ts meta.method.declaration.ts
               ^
               source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts meta.brace.square.ts
                ^^^^^
                source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts variable.other.readwrite.ts
                     ^
                     source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts meta.brace.square.ts
                      ^
                      source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                       ^
                       source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                        ^
                        source.ts meta.class.ts meta.method.declaration.ts
                         ^
                         source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                          ^
                          source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                           ^
                           source.ts meta.class.ts
                            ^
                            source.ts meta.class.ts punctuation.definition.block.ts
>class C { static get [using]() {} }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^
           source.ts meta.class.ts storage.modifier.ts
                 ^
                 source.ts meta.class.ts
                  ^^^
                  source.ts meta.class.ts meta.method.declaration.ts storage.type.property.ts
                     ^
                     source.ts meta.class.ts meta.method.declaration.ts
                      ^
                      source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts meta.brace.square.ts
                       ^^^^^
                       source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts variable.other.readwrite.ts
                            ^
                            source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts meta.brace.square.ts
                             ^
                             source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                              ^
                              source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                               ^
                               source.ts meta.class.ts meta.method.declaration.ts
                                ^
                                source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                                 ^
                                 source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                                  ^
                                  source.ts meta.class.ts
                                   ^
                                   source.ts meta.class.ts punctuation.definition.block.ts
>class C { abstract get [using](); }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^^^
           source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts
                   ^
                   source.ts meta.class.ts meta.method.declaration.ts
                    ^^^
                    source.ts meta.class.ts meta.method.declaration.ts storage.type.property.ts
                       ^
                       source.ts meta.class.ts meta.method.declaration.ts
                        ^
                        source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts meta.brace.square.ts
                         ^^^^^
                         source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts variable.other.readwrite.ts
                              ^
                              source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts meta.brace.square.ts
                               ^
                               source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                                ^
                                source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                                 ^
                                 source.ts meta.class.ts punctuation.terminator.statement.ts
                                  ^
                                  source.ts meta.class.ts
                                   ^
                                   source.ts meta.class.ts punctuation.definition.block.ts
>class C { set [using]() {} }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^
           source.ts meta.class.ts meta.method.declaration.ts storage.type.property.ts
              ^
              source.ts meta.class.ts meta.method.declaration.ts
               ^
               source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts meta.brace.square.ts
                ^^^^^
                source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts variable.other.readwrite.ts
                     ^
                     source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts meta.brace.square.ts
                      ^
                      source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                       ^
                       source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                        ^
                        source.ts meta.class.ts meta.method.declaration.ts
                         ^
                         source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                          ^
                          source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                           ^
                           source.ts meta.class.ts
                            ^
                            source.ts meta.class.ts punctuation.definition.block.ts
>class C { static set [using](v) {} }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^
           source.ts meta.class.ts storage.modifier.ts
                 ^
                 source.ts meta.class.ts
                  ^^^
                  source.ts meta.class.ts meta.method.declaration.ts storage.type.property.ts
                     ^
                     source.ts meta.class.ts meta.method.declaration.ts
                      ^
                      source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts meta.brace.square.ts
                       ^^^^^
                       source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts variable.other.readwrite.ts
                            ^
                            source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts meta.brace.square.ts
                             ^
                             source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                              ^
                              source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts variable.parameter.ts
                               ^
                               source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                                ^
                                source.ts meta.class.ts meta.method.declaration.ts
                                 ^
                                 source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                                  ^
                                  source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
                                   ^
                                   source.ts meta.class.ts
                                    ^
                                    source.ts meta.class.ts punctuation.definition.block.ts
>class C { abstract set [using](v); }
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
          ^
          source.ts meta.class.ts
           ^^^^^^^^
           source.ts meta.class.ts meta.method.declaration.ts storage.modifier.ts
                   ^
                   source.ts meta.class.ts meta.method.declaration.ts
                    ^^^
                    source.ts meta.class.ts meta.method.declaration.ts storage.type.property.ts
                       ^
                       source.ts meta.class.ts meta.method.declaration.ts
                        ^
                        source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts meta.brace.square.ts
                         ^^^^^
                         source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts variable.other.readwrite.ts
                              ^
                              source.ts meta.class.ts meta.method.declaration.ts meta.array.literal.ts meta.brace.square.ts
                               ^
                               source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                                ^
                                source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts variable.parameter.ts
                                 ^
                                 source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                                  ^
                                  source.ts meta.class.ts punctuation.terminator.statement.ts
                                   ^
                                   source.ts meta.class.ts
                                    ^
                                    source.ts meta.class.ts punctuation.definition.block.ts
>namespace using {}
 ^^^^^^^^^
 source.ts meta.namespace.declaration.ts storage.type.namespace.ts
          ^
          source.ts meta.namespace.declaration.ts
           ^^^^^
           source.ts meta.namespace.declaration.ts entity.name.type.module.ts
                ^
                source.ts meta.namespace.declaration.ts
                 ^
                 source.ts meta.namespace.declaration.ts meta.block.ts punctuation.definition.block.ts
                  ^
                  source.ts meta.namespace.declaration.ts meta.block.ts punctuation.definition.block.ts
>namespace using.x {}
 ^^^^^^^^^
 source.ts meta.namespace.declaration.ts storage.type.namespace.ts
          ^
          source.ts meta.namespace.declaration.ts
           ^^^^^
           source.ts meta.namespace.declaration.ts entity.name.type.module.ts
                ^
                source.ts meta.namespace.declaration.ts punctuation.accessor.ts
                 ^
                 source.ts meta.namespace.declaration.ts entity.name.type.module.ts
                  ^
                  source.ts meta.namespace.declaration.ts
                   ^
                   source.ts meta.namespace.declaration.ts meta.block.ts punctuation.definition.block.ts
                    ^
                    source.ts meta.namespace.declaration.ts meta.block.ts punctuation.definition.block.ts
>interface using {}
 ^^^^^^^^^
 source.ts meta.interface.ts storage.type.interface.ts
          ^
          source.ts meta.interface.ts
           ^^^^^
           source.ts meta.interface.ts entity.name.type.interface.ts
                ^
                source.ts meta.interface.ts
                 ^
                 source.ts meta.interface.ts punctuation.definition.block.ts
                  ^
                  source.ts meta.interface.ts punctuation.definition.block.ts
>interface I { [using: string]: using; }
 ^^^^^^^^^
 source.ts meta.interface.ts storage.type.interface.ts
          ^
          source.ts meta.interface.ts
           ^
           source.ts meta.interface.ts entity.name.type.interface.ts
            ^
            source.ts meta.interface.ts
             ^
             source.ts meta.interface.ts punctuation.definition.block.ts
              ^
              source.ts meta.interface.ts meta.indexer.declaration.ts
               ^
               source.ts meta.interface.ts meta.indexer.declaration.ts meta.brace.square.ts
                ^^^^^
                source.ts meta.interface.ts meta.indexer.declaration.ts variable.parameter.ts
                     ^
                     source.ts meta.interface.ts meta.indexer.declaration.ts meta.type.annotation.ts keyword.operator.type.annotation.ts
                      ^
                      source.ts meta.interface.ts meta.indexer.declaration.ts meta.type.annotation.ts
                       ^^^^^^
                       source.ts meta.interface.ts meta.indexer.declaration.ts meta.type.annotation.ts support.type.primitive.ts
                             ^
                             source.ts meta.interface.ts meta.indexer.declaration.ts meta.brace.square.ts
                              ^
                              source.ts meta.interface.ts meta.type.annotation.ts keyword.operator.type.annotation.ts
                               ^
                               source.ts meta.interface.ts meta.type.annotation.ts
                                ^^^^^
                                source.ts meta.interface.ts meta.type.annotation.ts entity.name.type.ts
                                     ^
                                     source.ts meta.interface.ts punctuation.terminator.statement.ts
                                      ^
                                      source.ts meta.interface.ts
                                       ^
                                       source.ts meta.interface.ts punctuation.definition.block.ts
>type using = never;
 ^^^^
 source.ts meta.type.declaration.ts storage.type.type.ts
     ^
     source.ts meta.type.declaration.ts
      ^^^^^
      source.ts meta.type.declaration.ts entity.name.type.alias.ts
           ^
           source.ts meta.type.declaration.ts
            ^
            source.ts meta.type.declaration.ts keyword.operator.assignment.ts
             ^
             source.ts meta.type.declaration.ts
              ^^^^^
              source.ts meta.type.declaration.ts support.type.primitive.ts
                   ^
                   source.ts punctuation.terminator.statement.ts
>type X<using> = never;
 ^^^^
 source.ts meta.type.declaration.ts storage.type.type.ts
     ^
     source.ts meta.type.declaration.ts
      ^
      source.ts meta.type.declaration.ts entity.name.type.alias.ts
       ^
       source.ts meta.type.declaration.ts meta.type.parameters.ts punctuation.definition.typeparameters.begin.ts
        ^^^^^
        source.ts meta.type.declaration.ts meta.type.parameters.ts entity.name.type.ts
             ^
             source.ts meta.type.declaration.ts meta.type.parameters.ts punctuation.definition.typeparameters.end.ts
              ^
              source.ts meta.type.declaration.ts
               ^
               source.ts meta.type.declaration.ts keyword.operator.assignment.ts
                ^
                source.ts meta.type.declaration.ts
                 ^^^^^
                 source.ts meta.type.declaration.ts support.type.primitive.ts
                      ^
                      source.ts punctuation.terminator.statement.ts
>enum using {}
 ^^^^
 source.ts meta.enum.declaration.ts storage.type.enum.ts
     ^
     source.ts meta.enum.declaration.ts
      ^^^^^
      source.ts meta.enum.declaration.ts entity.name.type.enum.ts
           ^
           source.ts meta.enum.declaration.ts
            ^
            source.ts meta.enum.declaration.ts punctuation.definition.block.ts
             ^
             source.ts meta.enum.declaration.ts punctuation.definition.block.ts
>enum E { using };
 ^^^^
 source.ts meta.enum.declaration.ts storage.type.enum.ts
     ^
     source.ts meta.enum.declaration.ts
      ^
      source.ts meta.enum.declaration.ts entity.name.type.enum.ts
       ^
       source.ts meta.enum.declaration.ts
        ^
        source.ts meta.enum.declaration.ts punctuation.definition.block.ts
         ^
         source.ts meta.enum.declaration.ts
          ^^^^^
          source.ts meta.enum.declaration.ts variable.other.enummember.ts
               ^
               source.ts meta.enum.declaration.ts
                ^
                source.ts meta.enum.declaration.ts punctuation.definition.block.ts
                 ^
                 source.ts punctuation.terminator.statement.ts
>enum E { a = using };
 ^^^^
 source.ts meta.enum.declaration.ts storage.type.enum.ts
     ^
     source.ts meta.enum.declaration.ts
      ^
      source.ts meta.enum.declaration.ts entity.name.type.enum.ts
       ^
       source.ts meta.enum.declaration.ts
        ^
        source.ts meta.enum.declaration.ts punctuation.definition.block.ts
         ^
         source.ts meta.enum.declaration.ts
          ^
          source.ts meta.enum.declaration.ts variable.other.enummember.ts
           ^
           source.ts meta.enum.declaration.ts
            ^
            source.ts meta.enum.declaration.ts keyword.operator.assignment.ts
             ^
             source.ts meta.enum.declaration.ts
              ^^^^^
              source.ts meta.enum.declaration.ts variable.other.readwrite.ts
                   ^
                   source.ts meta.enum.declaration.ts
                    ^
                    source.ts meta.enum.declaration.ts punctuation.definition.block.ts
                     ^
                     source.ts punctuation.terminator.statement.ts
>using: {};
 ^^^^^
 source.ts entity.name.label.ts
      ^
      source.ts punctuation.separator.label.ts
       ^
       source.ts
        ^
        source.ts meta.block.ts punctuation.definition.block.ts
         ^
         source.ts meta.block.ts punctuation.definition.block.ts
          ^
          source.ts punctuation.terminator.statement.ts
>break using;
 ^^^^^
 source.ts keyword.control.loop.ts
      ^
      source.ts
       ^^^^^
       source.ts entity.name.label.ts
            ^
            source.ts punctuation.terminator.statement.ts
>continue using;
 ^^^^^^^^
 source.ts keyword.control.loop.ts
         ^
         source.ts
          ^^^^^
          source.ts entity.name.label.ts
               ^
               source.ts punctuation.terminator.statement.ts
>switch (using) {
 ^^^^^^
 source.ts switch-statement.expr.ts switch-expression.expr.ts keyword.control.switch.ts
       ^
       source.ts switch-statement.expr.ts switch-expression.expr.ts
        ^
        source.ts switch-statement.expr.ts switch-expression.expr.ts meta.brace.round.ts
         ^^^^^
         source.ts switch-statement.expr.ts switch-expression.expr.ts variable.other.readwrite.ts
              ^
              source.ts switch-statement.expr.ts switch-expression.expr.ts meta.brace.round.ts
               ^
               source.ts switch-statement.expr.ts
                ^
                source.ts switch-statement.expr.ts switch-block.expr.ts punctuation.definition.block.ts
>    case using:
 ^^^^
 source.ts switch-statement.expr.ts switch-block.expr.ts
     ^^^^
     source.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
         ^
         source.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts
          ^^^^^
          source.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts variable.other.readwrite.ts
               ^
               source.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
>}
 ^
 source.ts switch-statement.expr.ts punctuation.definition.block.ts
>export { using };
 ^^^^^^
 source.ts meta.export.ts keyword.control.export.ts
       ^
       source.ts meta.export.ts
        ^
        source.ts meta.export.ts meta.block.ts punctuation.definition.block.ts
         ^
         source.ts meta.export.ts meta.block.ts
          ^^^^^
          source.ts meta.export.ts meta.block.ts variable.other.readwrite.alias.ts
               ^
               source.ts meta.export.ts meta.block.ts
                ^
                source.ts meta.export.ts meta.block.ts punctuation.definition.block.ts
                 ^
                 source.ts punctuation.terminator.statement.ts
>export { using as x };
 ^^^^^^
 source.ts meta.export.ts keyword.control.export.ts
       ^
       source.ts meta.export.ts
        ^
        source.ts meta.export.ts meta.block.ts punctuation.definition.block.ts
         ^
         source.ts meta.export.ts meta.block.ts
          ^^^^^
          source.ts meta.export.ts meta.block.ts variable.other.readwrite.ts
               ^
               source.ts meta.export.ts meta.block.ts
                ^^
                source.ts meta.export.ts meta.block.ts keyword.control.as.ts
                  ^
                  source.ts meta.export.ts meta.block.ts
                   ^
                   source.ts meta.export.ts meta.block.ts variable.other.readwrite.alias.ts
                    ^
                    source.ts meta.export.ts meta.block.ts
                     ^
                     source.ts meta.export.ts meta.block.ts punctuation.definition.block.ts
                      ^
                      source.ts punctuation.terminator.statement.ts
>export { x as using };
 ^^^^^^
 source.ts meta.export.ts keyword.control.export.ts
       ^
       source.ts meta.export.ts
        ^
        source.ts meta.export.ts meta.block.ts punctuation.definition.block.ts
         ^
         source.ts meta.export.ts meta.block.ts
          ^
          source.ts meta.export.ts meta.block.ts variable.other.readwrite.ts
           ^
           source.ts meta.export.ts meta.block.ts
            ^^
            source.ts meta.export.ts meta.block.ts keyword.control.as.ts
              ^
              source.ts meta.export.ts meta.block.ts
               ^^^^^
               source.ts meta.export.ts meta.block.ts variable.other.readwrite.alias.ts
                    ^
                    source.ts meta.export.ts meta.block.ts
                     ^
                     source.ts meta.export.ts meta.block.ts punctuation.definition.block.ts
                      ^
                      source.ts punctuation.terminator.statement.ts
>import using from "";
 ^^^^^^
 source.ts meta.import.ts keyword.control.import.ts
       ^
       source.ts meta.import.ts
        ^^^^^
        source.ts meta.import.ts variable.other.readwrite.alias.ts
             ^
             source.ts meta.import.ts
              ^^^^
              source.ts meta.import.ts keyword.control.from.ts
                  ^
                  source.ts meta.import.ts
                   ^
                   source.ts meta.import.ts string.quoted.double.ts punctuation.definition.string.begin.ts
                    ^
                    source.ts meta.import.ts string.quoted.double.ts punctuation.definition.string.end.ts
                     ^
                     source.ts punctuation.terminator.statement.ts
>import * as using from "";
 ^^^^^^
 source.ts meta.import.ts keyword.control.import.ts
       ^
       source.ts meta.import.ts
        ^
        source.ts meta.import.ts constant.language.import-export-all.ts
         ^
         source.ts meta.import.ts
          ^^
          source.ts meta.import.ts keyword.control.as.ts
            ^
            source.ts meta.import.ts
             ^^^^^
             source.ts meta.import.ts variable.other.readwrite.alias.ts
                  ^
                  source.ts meta.import.ts
                   ^^^^
                   source.ts meta.import.ts keyword.control.from.ts
                       ^
                       source.ts meta.import.ts
                        ^
                        source.ts meta.import.ts string.quoted.double.ts punctuation.definition.string.begin.ts
                         ^
                         source.ts meta.import.ts string.quoted.double.ts punctuation.definition.string.end.ts
                          ^
                          source.ts punctuation.terminator.statement.ts
>import { using } from "";
 ^^^^^^
 source.ts meta.import.ts keyword.control.import.ts
       ^
       source.ts meta.import.ts
        ^
        source.ts meta.import.ts meta.block.ts punctuation.definition.block.ts
         ^
         source.ts meta.import.ts meta.block.ts
          ^^^^^
          source.ts meta.import.ts meta.block.ts variable.other.readwrite.alias.ts
               ^
               source.ts meta.import.ts meta.block.ts
                ^
                source.ts meta.import.ts meta.block.ts punctuation.definition.block.ts
                 ^
                 source.ts meta.import.ts
                  ^^^^
                  source.ts meta.import.ts keyword.control.from.ts
                      ^
                      source.ts meta.import.ts
                       ^
                       source.ts meta.import.ts string.quoted.double.ts punctuation.definition.string.begin.ts
                        ^
                        source.ts meta.import.ts string.quoted.double.ts punctuation.definition.string.end.ts
                         ^
                         source.ts punctuation.terminator.statement.ts
>import { using as x } from "";
 ^^^^^^
 source.ts meta.import.ts keyword.control.import.ts
       ^
       source.ts meta.import.ts
        ^
        source.ts meta.import.ts meta.block.ts punctuation.definition.block.ts
         ^
         source.ts meta.import.ts meta.block.ts
          ^^^^^
          source.ts meta.import.ts meta.block.ts variable.other.readwrite.ts
               ^
               source.ts meta.import.ts meta.block.ts
                ^^
                source.ts meta.import.ts meta.block.ts keyword.control.as.ts
                  ^
                  source.ts meta.import.ts meta.block.ts
                   ^
                   source.ts meta.import.ts meta.block.ts variable.other.readwrite.alias.ts
                    ^
                    source.ts meta.import.ts meta.block.ts
                     ^
                     source.ts meta.import.ts meta.block.ts punctuation.definition.block.ts
                      ^
                      source.ts meta.import.ts
                       ^^^^
                       source.ts meta.import.ts keyword.control.from.ts
                           ^
                           source.ts meta.import.ts
                            ^
                            source.ts meta.import.ts string.quoted.double.ts punctuation.definition.string.begin.ts
                             ^
                             source.ts meta.import.ts string.quoted.double.ts punctuation.definition.string.end.ts
                              ^
                              source.ts punctuation.terminator.statement.ts
>import { x as using } from "";
 ^^^^^^
 source.ts meta.import.ts keyword.control.import.ts
       ^
       source.ts meta.import.ts
        ^
        source.ts meta.import.ts meta.block.ts punctuation.definition.block.ts
         ^
         source.ts meta.import.ts meta.block.ts
          ^
          source.ts meta.import.ts meta.block.ts variable.other.readwrite.ts
           ^
           source.ts meta.import.ts meta.block.ts
            ^^
            source.ts meta.import.ts meta.block.ts keyword.control.as.ts
              ^
              source.ts meta.import.ts meta.block.ts
               ^^^^^
               source.ts meta.import.ts meta.block.ts variable.other.readwrite.alias.ts
                    ^
                    source.ts meta.import.ts meta.block.ts
                     ^
                     source.ts meta.import.ts meta.block.ts punctuation.definition.block.ts
                      ^
                      source.ts meta.import.ts
                       ^^^^
                       source.ts meta.import.ts keyword.control.from.ts
                           ^
                           source.ts meta.import.ts
                            ^
                            source.ts meta.import.ts string.quoted.double.ts punctuation.definition.string.begin.ts
                             ^
                             source.ts meta.import.ts string.quoted.double.ts punctuation.definition.string.end.ts
                              ^
                              source.ts punctuation.terminator.statement.ts
>for (using;;);
 ^^^
 source.ts keyword.control.loop.ts
    ^
    source.ts
     ^
     source.ts meta.brace.round.ts
      ^^^^^
      source.ts variable.other.readwrite.ts
           ^
           source.ts punctuation.terminator.statement.ts
            ^
            source.ts punctuation.terminator.statement.ts
             ^
             source.ts meta.brace.round.ts
              ^
              source.ts punctuation.terminator.statement.ts
>for (using = a;;);
 ^^^
 source.ts keyword.control.loop.ts
    ^
    source.ts
     ^
     source.ts meta.brace.round.ts
      ^^^^^
      source.ts variable.other.readwrite.ts
           ^
           source.ts
            ^
            source.ts keyword.operator.assignment.ts
             ^
             source.ts
              ^
              source.ts variable.other.readwrite.ts
               ^
               source.ts punctuation.terminator.statement.ts
                ^
                source.ts punctuation.terminator.statement.ts
                 ^
                 source.ts meta.brace.round.ts
                  ^
                  source.ts punctuation.terminator.statement.ts
>for (using[x];;);
 ^^^
 source.ts keyword.control.loop.ts
    ^
    source.ts
     ^
     source.ts meta.brace.round.ts
      ^^^^^
      source.ts variable.other.readwrite.ts
           ^
           source.ts meta.array.literal.ts meta.brace.square.ts
            ^
            source.ts meta.array.literal.ts variable.other.readwrite.ts
             ^
             source.ts meta.array.literal.ts meta.brace.square.ts
              ^
              source.ts punctuation.terminator.statement.ts
               ^
               source.ts punctuation.terminator.statement.ts
                ^
                source.ts meta.brace.round.ts
                 ^
                 source.ts punctuation.terminator.statement.ts
>for (using[x] = a;;);
 ^^^
 source.ts keyword.control.loop.ts
    ^
    source.ts
     ^
     source.ts meta.brace.round.ts
      ^^^^^
      source.ts variable.other.readwrite.ts
           ^
           source.ts meta.array.literal.ts meta.brace.square.ts
            ^
            source.ts meta.array.literal.ts variable.other.readwrite.ts
             ^
             source.ts meta.array.literal.ts meta.brace.square.ts
              ^
              source.ts
               ^
               source.ts keyword.operator.assignment.ts
                ^
                source.ts
                 ^
                 source.ts variable.other.readwrite.ts
                  ^
                  source.ts punctuation.terminator.statement.ts
                   ^
                   source.ts punctuation.terminator.statement.ts
                    ^
                    source.ts meta.brace.round.ts
                     ^
                     source.ts punctuation.terminator.statement.ts
>for (using in a);
 ^^^
 source.ts keyword.control.loop.ts
    ^
    source.ts
     ^
     source.ts meta.brace.round.ts
      ^^^^^
      source.ts variable.other.readwrite.ts
           ^
           source.ts
            ^^
            source.ts keyword.operator.expression.in.ts
              ^
              source.ts
               ^
               source.ts variable.other.readwrite.ts
                ^
                source.ts meta.brace.round.ts
                 ^
                 source.ts punctuation.terminator.statement.ts
>for (using of a);
 ^^^
 source.ts keyword.control.loop.ts
    ^
    source.ts
     ^
     source.ts meta.brace.round.ts
      ^^^^^
      source.ts variable.other.readwrite.ts
           ^
           source.ts
            ^^
            source.ts keyword.operator.expression.of.ts
              ^
              source.ts
               ^
               source.ts variable.other.readwrite.ts
                ^
                source.ts meta.brace.round.ts
                 ^
                 source.ts punctuation.terminator.statement.ts
>
 ^
 source.ts
>using
 ^^^^^
 source.ts variable.other.readwrite.ts
>x = a;
 ^
 source.ts variable.other.readwrite.ts
  ^
  source.ts
   ^
   source.ts keyword.operator.assignment.ts
    ^
    source.ts
     ^
     source.ts variable.other.readwrite.ts
      ^
      source.ts punctuation.terminator.statement.ts
>
 ^
 source.ts
>using
 ^^^^^
 source.ts variable.other.readwrite.ts
>[x] = a;
 ^
 source.ts meta.array.literal.ts meta.brace.square.ts
  ^
  source.ts meta.array.literal.ts variable.other.readwrite.ts
   ^
   source.ts meta.array.literal.ts meta.brace.square.ts
    ^
    source.ts
     ^
     source.ts keyword.operator.assignment.ts
      ^
      source.ts
       ^
       source.ts variable.other.readwrite.ts
        ^
        source.ts punctuation.terminator.statement.ts
>
 ^
 source.ts
>// using as keyword
 ^^
 source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
   ^^^^^^^^^^^^^^^^^
   source.ts comment.line.double-slash.ts
>using x = a;
 ^^^^^
 source.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.var.expr.ts
       ^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
        ^
        source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
         ^
         source.ts meta.var.expr.ts keyword.operator.assignment.ts
          ^
          source.ts meta.var.expr.ts
           ^
           source.ts meta.var.expr.ts variable.other.readwrite.ts
            ^
            source.ts punctuation.terminator.statement.ts
>using x = a, y = b;
 ^^^^^
 source.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.var.expr.ts
       ^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
        ^
        source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
         ^
         source.ts meta.var.expr.ts keyword.operator.assignment.ts
          ^
          source.ts meta.var.expr.ts
           ^
           source.ts meta.var.expr.ts variable.other.readwrite.ts
            ^
            source.ts meta.var.expr.ts punctuation.separator.comma.ts
             ^
             source.ts meta.var.expr.ts
              ^
              source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
               ^
               source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
                ^
                source.ts meta.var.expr.ts keyword.operator.assignment.ts
                 ^
                 source.ts meta.var.expr.ts
                  ^
                  source.ts meta.var.expr.ts variable.other.readwrite.ts
                   ^
                   source.ts punctuation.terminator.statement.ts
>
 ^
 source.ts
>using x
 ^^^^^
 source.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.var.expr.ts
       ^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
>= a;
 ^
 source.ts keyword.operator.assignment.ts
  ^
  source.ts
   ^
   source.ts variable.other.readwrite.ts
    ^
    source.ts punctuation.terminator.statement.ts
>
 ^
 source.ts
>using x
 ^^^^^
 source.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.var.expr.ts
       ^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
>= a, y = b;
 ^
 source.ts keyword.operator.assignment.ts
  ^
  source.ts
   ^
   source.ts variable.other.readwrite.ts
    ^
    source.ts punctuation.separator.comma.ts
     ^
     source.ts
      ^
      source.ts variable.other.readwrite.ts
       ^
       source.ts
        ^
        source.ts keyword.operator.assignment.ts
         ^
         source.ts
          ^
          source.ts variable.other.readwrite.ts
           ^
           source.ts punctuation.terminator.statement.ts
>
 ^
 source.ts
>using x = a
 ^^^^^
 source.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.var.expr.ts
       ^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
        ^
        source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
         ^
         source.ts meta.var.expr.ts keyword.operator.assignment.ts
          ^
          source.ts meta.var.expr.ts
           ^
           source.ts meta.var.expr.ts variable.other.readwrite.ts
>    , y = b;
 ^^^^
 source.ts
     ^
     source.ts punctuation.separator.comma.ts
      ^
      source.ts
       ^
       source.ts variable.other.readwrite.ts
        ^
        source.ts
         ^
         source.ts keyword.operator.assignment.ts
          ^
          source.ts
           ^
           source.ts variable.other.readwrite.ts
            ^
            source.ts punctuation.terminator.statement.ts
>
 ^
 source.ts
>using x = a,
 ^^^^^
 source.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.var.expr.ts
       ^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
        ^
        source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
         ^
         source.ts meta.var.expr.ts keyword.operator.assignment.ts
          ^
          source.ts meta.var.expr.ts
           ^
           source.ts meta.var.expr.ts variable.other.readwrite.ts
            ^
            source.ts meta.var.expr.ts punctuation.separator.comma.ts
>      y = b;
 ^^^^^^
 source.ts meta.var.expr.ts
       ^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
        ^
        source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
         ^
         source.ts meta.var.expr.ts keyword.operator.assignment.ts
          ^
          source.ts meta.var.expr.ts
           ^
           source.ts meta.var.expr.ts variable.other.readwrite.ts
            ^
            source.ts punctuation.terminator.statement.ts
>
 ^
 source.ts
>for (using x of a);
 ^^^
 source.ts keyword.control.loop.ts
    ^
    source.ts
     ^
     source.ts meta.brace.round.ts
      ^^^^^
      source.ts meta.var.expr.ts storage.type.ts
           ^
           source.ts meta.var.expr.ts
            ^
            source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
             ^
             source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
              ^^
              source.ts keyword.operator.expression.of.ts
                ^
                source.ts
                 ^
                 source.ts variable.other.readwrite.ts
                  ^
                  source.ts meta.brace.round.ts
                   ^
                   source.ts punctuation.terminator.statement.ts
>for (using x = a;;);
 ^^^
 source.ts keyword.control.loop.ts
    ^
    source.ts
     ^
     source.ts meta.brace.round.ts
      ^^^^^
      source.ts meta.var.expr.ts storage.type.ts
           ^
           source.ts meta.var.expr.ts
            ^
            source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
             ^
             source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
              ^
              source.ts meta.var.expr.ts keyword.operator.assignment.ts
               ^
               source.ts meta.var.expr.ts
                ^
                source.ts meta.var.expr.ts variable.other.readwrite.ts
                 ^
                 source.ts punctuation.terminator.statement.ts
                  ^
                  source.ts punctuation.terminator.statement.ts
                   ^
                   source.ts meta.brace.round.ts
                    ^
                    source.ts punctuation.terminator.statement.ts
>for (using x = a, y = b;;);
 ^^^
 source.ts keyword.control.loop.ts
    ^
    source.ts
     ^
     source.ts meta.brace.round.ts
      ^^^^^
      source.ts meta.var.expr.ts storage.type.ts
           ^
           source.ts meta.var.expr.ts
            ^
            source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
             ^
             source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
              ^
              source.ts meta.var.expr.ts keyword.operator.assignment.ts
               ^
               source.ts meta.var.expr.ts
                ^
                source.ts meta.var.expr.ts variable.other.readwrite.ts
                 ^
                 source.ts meta.var.expr.ts punctuation.separator.comma.ts
                  ^
                  source.ts meta.var.expr.ts
                   ^
                   source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
                    ^
                    source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
                     ^
                     source.ts meta.var.expr.ts keyword.operator.assignment.ts
                      ^
                      source.ts meta.var.expr.ts
                       ^
                       source.ts meta.var.expr.ts variable.other.readwrite.ts
                        ^
                        source.ts punctuation.terminator.statement.ts
                         ^
                         source.ts punctuation.terminator.statement.ts
                          ^
                          source.ts meta.brace.round.ts
                           ^
                           source.ts punctuation.terminator.statement.ts
>
 ^
 source.ts
>for (using x
 ^^^
 source.ts keyword.control.loop.ts
    ^
    source.ts
     ^
     source.ts meta.brace.round.ts
      ^^^^^
      source.ts meta.var.expr.ts storage.type.ts
           ^
           source.ts meta.var.expr.ts
            ^
            source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
>= a;;);
 ^
 source.ts keyword.operator.assignment.ts
  ^
  source.ts
   ^
   source.ts variable.other.readwrite.ts
    ^
    source.ts punctuation.terminator.statement.ts
     ^
     source.ts punctuation.terminator.statement.ts
      ^
      source.ts meta.brace.round.ts
       ^
       source.ts punctuation.terminator.statement.ts
>
 ^
 source.ts
>for (using x
 ^^^
 source.ts keyword.control.loop.ts
    ^
    source.ts
     ^
     source.ts meta.brace.round.ts
      ^^^^^
      source.ts meta.var.expr.ts storage.type.ts
           ^
           source.ts meta.var.expr.ts
            ^
            source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
>= a, y = b;;);
 ^
 source.ts keyword.operator.assignment.ts
  ^
  source.ts
   ^
   source.ts variable.other.readwrite.ts
    ^
    source.ts punctuation.separator.comma.ts
     ^
     source.ts
      ^
      source.ts variable.other.readwrite.ts
       ^
       source.ts
        ^
        source.ts keyword.operator.assignment.ts
         ^
         source.ts
          ^
          source.ts variable.other.readwrite.ts
           ^
           source.ts punctuation.terminator.statement.ts
            ^
            source.ts punctuation.terminator.statement.ts
             ^
             source.ts meta.brace.round.ts
              ^
              source.ts punctuation.terminator.statement.ts
>
 ^
 source.ts
>for (using x = a
 ^^^
 source.ts keyword.control.loop.ts
    ^
    source.ts
     ^
     source.ts meta.brace.round.ts
      ^^^^^
      source.ts meta.var.expr.ts storage.type.ts
           ^
           source.ts meta.var.expr.ts
            ^
            source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
             ^
             source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
              ^
              source.ts meta.var.expr.ts keyword.operator.assignment.ts
               ^
               source.ts meta.var.expr.ts
                ^
                source.ts meta.var.expr.ts variable.other.readwrite.ts
>         , y = b;;);
 ^^^^^^^^^
 source.ts
          ^
          source.ts punctuation.separator.comma.ts
           ^
           source.ts
            ^
            source.ts variable.other.readwrite.ts
             ^
             source.ts
              ^
              source.ts keyword.operator.assignment.ts
               ^
               source.ts
                ^
                source.ts variable.other.readwrite.ts
                 ^
                 source.ts punctuation.terminator.statement.ts
                  ^
                  source.ts punctuation.terminator.statement.ts
                   ^
                   source.ts meta.brace.round.ts
                    ^
                    source.ts punctuation.terminator.statement.ts
>
 ^
 source.ts
>for (using x = a,
 ^^^
 source.ts keyword.control.loop.ts
    ^
    source.ts
     ^
     source.ts meta.brace.round.ts
      ^^^^^
      source.ts meta.var.expr.ts storage.type.ts
           ^
           source.ts meta.var.expr.ts
            ^
            source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
             ^
             source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
              ^
              source.ts meta.var.expr.ts keyword.operator.assignment.ts
               ^
               source.ts meta.var.expr.ts
                ^
                source.ts meta.var.expr.ts variable.other.readwrite.ts
                 ^
                 source.ts meta.var.expr.ts punctuation.separator.comma.ts
>           y = b;;);
 ^^^^^^^^^^^
 source.ts meta.var.expr.ts
            ^
            source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
             ^
             source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
              ^
              source.ts meta.var.expr.ts keyword.operator.assignment.ts
               ^
               source.ts meta.var.expr.ts
                ^
                source.ts meta.var.expr.ts variable.other.readwrite.ts
                 ^
                 source.ts punctuation.terminator.statement.ts
                  ^
                  source.ts punctuation.terminator.statement.ts
                   ^
                   source.ts meta.brace.round.ts
                    ^
                    source.ts punctuation.terminator.statement.ts
>
 ^
 source.ts
>function f() {
 ^^^^^^^^
 source.ts meta.function.ts storage.type.function.ts
         ^
         source.ts meta.function.ts
          ^
          source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts
           ^
           source.ts meta.function.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
            ^
            source.ts meta.function.ts meta.parameters.ts punctuation.definition.parameters.end.ts
             ^
             source.ts meta.function.ts
              ^
              source.ts meta.function.ts meta.block.ts punctuation.definition.block.ts
>    using x = a;
 ^^^^
 source.ts meta.function.ts meta.block.ts
     ^^^^^
     source.ts meta.function.ts meta.block.ts meta.var.expr.ts storage.type.ts
          ^
          source.ts meta.function.ts meta.block.ts meta.var.expr.ts
           ^
           source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
            ^
            source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
             ^
             source.ts meta.function.ts meta.block.ts meta.var.expr.ts keyword.operator.assignment.ts
              ^
              source.ts meta.function.ts meta.block.ts meta.var.expr.ts
               ^
               source.ts meta.function.ts meta.block.ts meta.var.expr.ts variable.other.readwrite.ts
                ^
                source.ts meta.function.ts meta.block.ts punctuation.terminator.statement.ts
>}
 ^
 source.ts meta.function.ts meta.block.ts punctuation.definition.block.ts
>
 ^
 source.ts
>(() => {
 ^
 source.ts meta.brace.round.ts
  ^
  source.ts meta.arrow.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
   ^
   source.ts meta.arrow.ts meta.parameters.ts punctuation.definition.parameters.end.ts
    ^
    source.ts meta.arrow.ts
     ^^
     source.ts meta.arrow.ts storage.type.function.arrow.ts
       ^
       source.ts meta.arrow.ts
        ^
        source.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts
>    using x = a;
 ^^^^
 source.ts meta.arrow.ts meta.block.ts
     ^^^^^
     source.ts meta.arrow.ts meta.block.ts meta.var.expr.ts storage.type.ts
          ^
          source.ts meta.arrow.ts meta.block.ts meta.var.expr.ts
           ^
           source.ts meta.arrow.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
            ^
            source.ts meta.arrow.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
             ^
             source.ts meta.arrow.ts meta.block.ts meta.var.expr.ts keyword.operator.assignment.ts
              ^
              source.ts meta.arrow.ts meta.block.ts meta.var.expr.ts
               ^
               source.ts meta.arrow.ts meta.block.ts meta.var.expr.ts variable.other.readwrite.ts
                ^
                source.ts meta.arrow.ts meta.block.ts punctuation.terminator.statement.ts
>})
 ^
 source.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts
  ^
  source.ts meta.brace.round.ts
>
 ^
 source.ts
>namespace N {
 ^^^^^^^^^
 source.ts meta.namespace.declaration.ts storage.type.namespace.ts
          ^
          source.ts meta.namespace.declaration.ts
           ^
           source.ts meta.namespace.declaration.ts entity.name.type.module.ts
            ^
            source.ts meta.namespace.declaration.ts
             ^
             source.ts meta.namespace.declaration.ts meta.block.ts punctuation.definition.block.ts
>    using x = a;
 ^^^^
 source.ts meta.namespace.declaration.ts meta.block.ts
     ^^^^^
     source.ts meta.namespace.declaration.ts meta.block.ts meta.var.expr.ts storage.type.ts
          ^
          source.ts meta.namespace.declaration.ts meta.block.ts meta.var.expr.ts
           ^
           source.ts meta.namespace.declaration.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
            ^
            source.ts meta.namespace.declaration.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
             ^
             source.ts meta.namespace.declaration.ts meta.block.ts meta.var.expr.ts keyword.operator.assignment.ts
              ^
              source.ts meta.namespace.declaration.ts meta.block.ts meta.var.expr.ts
               ^
               source.ts meta.namespace.declaration.ts meta.block.ts meta.var.expr.ts variable.other.readwrite.ts
                ^
                source.ts meta.namespace.declaration.ts meta.block.ts punctuation.terminator.statement.ts
>}
 ^
 source.ts meta.namespace.declaration.ts meta.block.ts punctuation.definition.block.ts
>
 ^
 source.ts
>class C {
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^
       source.ts meta.class.ts entity.name.type.class.ts
        ^
        source.ts meta.class.ts
         ^
         source.ts meta.class.ts punctuation.definition.block.ts
>    constructor() {
 ^^^^
 source.ts meta.class.ts meta.method.declaration.ts
     ^^^^^^^^^^^
     source.ts meta.class.ts meta.method.declaration.ts storage.type.ts
                ^
                source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                 ^
                 source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                  ^
                  source.ts meta.class.ts meta.method.declaration.ts
                   ^
                   source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
>        using x = a;
 ^^^^^^^^
 source.ts meta.class.ts meta.method.declaration.ts meta.block.ts
         ^^^^^
         source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts storage.type.ts
              ^
              source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts
               ^
               source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
                ^
                source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
                 ^
                 source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts keyword.operator.assignment.ts
                  ^
                  source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts
                   ^
                   source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts variable.other.readwrite.ts
                    ^
                    source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.terminator.statement.ts
>    }
 ^^^^
 source.ts meta.class.ts meta.method.declaration.ts meta.block.ts
     ^
     source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
>    method() {
 ^^^^
 source.ts meta.class.ts meta.method.declaration.ts
     ^^^^^^
     source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts
           ^
           source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
            ^
            source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
             ^
             source.ts meta.class.ts meta.method.declaration.ts
              ^
              source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
>        using x = a;
 ^^^^^^^^
 source.ts meta.class.ts meta.method.declaration.ts meta.block.ts
         ^^^^^
         source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts storage.type.ts
              ^
              source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts
               ^
               source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
                ^
                source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
                 ^
                 source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts keyword.operator.assignment.ts
                  ^
                  source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts
                   ^
                   source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts variable.other.readwrite.ts
                    ^
                    source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.terminator.statement.ts
>    }
 ^^^^
 source.ts meta.class.ts meta.method.declaration.ts meta.block.ts
     ^
     source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
>    get p() {
 ^^^^
 source.ts meta.class.ts
     ^^^
     source.ts meta.class.ts meta.method.declaration.ts storage.type.property.ts
        ^
        source.ts meta.class.ts meta.method.declaration.ts
         ^
         source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts
          ^
          source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
           ^
           source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
            ^
            source.ts meta.class.ts meta.method.declaration.ts
             ^
             source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
>        using x = a;
 ^^^^^^^^
 source.ts meta.class.ts meta.method.declaration.ts meta.block.ts
         ^^^^^
         source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts storage.type.ts
              ^
              source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts
               ^
               source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
                ^
                source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
                 ^
                 source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts keyword.operator.assignment.ts
                  ^
                  source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts
                   ^
                   source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts variable.other.readwrite.ts
                    ^
                    source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.terminator.statement.ts
>    }
 ^^^^
 source.ts meta.class.ts meta.method.declaration.ts meta.block.ts
     ^
     source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
>    set p(v) {
 ^^^^
 source.ts meta.class.ts
     ^^^
     source.ts meta.class.ts meta.method.declaration.ts storage.type.property.ts
        ^
        source.ts meta.class.ts meta.method.declaration.ts
         ^
         source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts
          ^
          source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
           ^
           source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts variable.parameter.ts
            ^
            source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
             ^
             source.ts meta.class.ts meta.method.declaration.ts
              ^
              source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
>        using x = a;
 ^^^^^^^^
 source.ts meta.class.ts meta.method.declaration.ts meta.block.ts
         ^^^^^
         source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts storage.type.ts
              ^
              source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts
               ^
               source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
                ^
                source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
                 ^
                 source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts keyword.operator.assignment.ts
                  ^
                  source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts
                   ^
                   source.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.var.expr.ts variable.other.readwrite.ts
                    ^
                    source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.terminator.statement.ts
>    }
 ^^^^
 source.ts meta.class.ts meta.method.declaration.ts meta.block.ts
     ^
     source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
>    static {
 ^^^^
 source.ts meta.class.ts
     ^^^^^^
     source.ts meta.class.ts storage.modifier.ts
           ^
           source.ts meta.class.ts
            ^
            source.ts meta.class.ts meta.block.ts punctuation.definition.block.ts
>        using x = a;
 ^^^^^^^^
 source.ts meta.class.ts meta.block.ts
         ^^^^^
         source.ts meta.class.ts meta.block.ts meta.var.expr.ts storage.type.ts
              ^
              source.ts meta.class.ts meta.block.ts meta.var.expr.ts
               ^
               source.ts meta.class.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
                ^
                source.ts meta.class.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
                 ^
                 source.ts meta.class.ts meta.block.ts meta.var.expr.ts keyword.operator.assignment.ts
                  ^
                  source.ts meta.class.ts meta.block.ts meta.var.expr.ts
                   ^
                   source.ts meta.class.ts meta.block.ts meta.var.expr.ts variable.other.readwrite.ts
                    ^
                    source.ts meta.class.ts meta.block.ts punctuation.terminator.statement.ts
>    }
 ^^^^
 source.ts meta.class.ts meta.block.ts
     ^
     source.ts meta.class.ts meta.block.ts punctuation.definition.block.ts
>}
 ^
 source.ts meta.class.ts punctuation.definition.block.ts
>
 ^
 source.ts
>// using as identifier, illegal syntax
 ^^
 source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   source.ts comment.line.double-slash.ts
>using {x};
 ^^^^^
 source.ts variable.other.readwrite.ts
      ^
      source.ts
       ^
       source.ts meta.block.ts punctuation.definition.block.ts
        ^
        source.ts meta.block.ts variable.other.readwrite.ts
         ^
         source.ts meta.block.ts punctuation.definition.block.ts
          ^
          source.ts punctuation.terminator.statement.ts
>using {x: y};
 ^^^^^
 source.ts variable.other.readwrite.ts
      ^
      source.ts
       ^
       source.ts meta.block.ts punctuation.definition.block.ts
        ^
        source.ts meta.block.ts entity.name.label.ts
         ^
         source.ts meta.block.ts punctuation.separator.label.ts
          ^
          source.ts meta.block.ts
           ^
           source.ts meta.block.ts variable.other.readwrite.ts
            ^
            source.ts meta.block.ts punctuation.definition.block.ts
             ^
             source.ts punctuation.terminator.statement.ts
>
 ^
 source.ts
>// using as keyword, illegal syntax
 ^^
 source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   source.ts comment.line.double-slash.ts
>using x;
 ^^^^^
 source.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.var.expr.ts
       ^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
        ^
        source.ts punctuation.terminator.statement.ts
>using x, y;
 ^^^^^
 source.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.var.expr.ts
       ^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
        ^
        source.ts meta.var.expr.ts punctuation.separator.comma.ts
         ^
         source.ts meta.var.expr.ts
          ^
          source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
           ^
           source.ts punctuation.terminator.statement.ts
>using x, [y];
 ^^^^^
 source.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.var.expr.ts
       ^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
        ^
        source.ts meta.var.expr.ts punctuation.separator.comma.ts
         ^^
         source.ts meta.var.expr.ts
           ^
           source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
            ^
            source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
             ^
             source.ts punctuation.terminator.statement.ts
>using x, {y};
 ^^^^^
 source.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.var.expr.ts
       ^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
        ^
        source.ts meta.var.expr.ts punctuation.separator.comma.ts
         ^^
         source.ts meta.var.expr.ts
           ^
           source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
            ^
            source.ts
             ^
             source.ts punctuation.terminator.statement.ts
>using x, {y: z};
 ^^^^^
 source.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.var.expr.ts
       ^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
        ^
        source.ts meta.var.expr.ts punctuation.separator.comma.ts
         ^^
         source.ts meta.var.expr.ts
           ^
           source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
            ^
            source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts keyword.operator.type.annotation.ts
             ^
             source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts
              ^
              source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts entity.name.type.ts
               ^
               source.ts
                ^
                source.ts punctuation.terminator.statement.ts
>using x = a, y;
 ^^^^^
 source.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.var.expr.ts
       ^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
        ^
        source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
         ^
         source.ts meta.var.expr.ts keyword.operator.assignment.ts
          ^
          source.ts meta.var.expr.ts
           ^
           source.ts meta.var.expr.ts variable.other.readwrite.ts
            ^
            source.ts meta.var.expr.ts punctuation.separator.comma.ts
             ^
             source.ts meta.var.expr.ts
              ^
              source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
               ^
               source.ts punctuation.terminator.statement.ts
>using x = a, [y];
 ^^^^^
 source.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.var.expr.ts
       ^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
        ^
        source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
         ^
         source.ts meta.var.expr.ts keyword.operator.assignment.ts
          ^
          source.ts meta.var.expr.ts
           ^
           source.ts meta.var.expr.ts variable.other.readwrite.ts
            ^
            source.ts meta.var.expr.ts punctuation.separator.comma.ts
             ^^
             source.ts meta.var.expr.ts
               ^
               source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
                ^
                source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
                 ^
                 source.ts punctuation.terminator.statement.ts
>using x = a, {y};
 ^^^^^
 source.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.var.expr.ts
       ^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
        ^
        source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
         ^
         source.ts meta.var.expr.ts keyword.operator.assignment.ts
          ^
          source.ts meta.var.expr.ts
           ^
           source.ts meta.var.expr.ts variable.other.readwrite.ts
            ^
            source.ts meta.var.expr.ts punctuation.separator.comma.ts
             ^^
             source.ts meta.var.expr.ts
               ^
               source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
                ^
                source.ts
                 ^
                 source.ts punctuation.terminator.statement.ts
>using x = a, {y: z};
 ^^^^^
 source.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.var.expr.ts
       ^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
        ^
        source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
         ^
         source.ts meta.var.expr.ts keyword.operator.assignment.ts
          ^
          source.ts meta.var.expr.ts
           ^
           source.ts meta.var.expr.ts variable.other.readwrite.ts
            ^
            source.ts meta.var.expr.ts punctuation.separator.comma.ts
             ^^
             source.ts meta.var.expr.ts
               ^
               source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
                ^
                source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts keyword.operator.type.annotation.ts
                 ^
                 source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts
                  ^
                  source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts entity.name.type.ts
                   ^
                   source.ts
                    ^
                    source.ts punctuation.terminator.statement.ts
>declare using x;
 ^^^^^^^
 source.ts meta.var.expr.ts storage.modifier.ts
        ^
        source.ts meta.var.expr.ts
         ^^^^^
         source.ts meta.var.expr.ts storage.type.ts
              ^
              source.ts meta.var.expr.ts
               ^
               source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
                ^
                source.ts punctuation.terminator.statement.ts
>declare using x = a;
 ^^^^^^^
 source.ts meta.var.expr.ts storage.modifier.ts
        ^
        source.ts meta.var.expr.ts
         ^^^^^
         source.ts meta.var.expr.ts storage.type.ts
              ^
              source.ts meta.var.expr.ts
               ^
               source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
                ^
                source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
                 ^
                 source.ts meta.var.expr.ts keyword.operator.assignment.ts
                  ^
                  source.ts meta.var.expr.ts
                   ^
                   source.ts meta.var.expr.ts variable.other.readwrite.ts
                    ^
                    source.ts punctuation.terminator.statement.ts
>export using x;
 ^^^^^^
 source.ts meta.var.expr.ts keyword.control.export.ts
       ^
       source.ts meta.var.expr.ts
        ^^^^^
        source.ts meta.var.expr.ts storage.type.ts
             ^
             source.ts meta.var.expr.ts
              ^
              source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
               ^
               source.ts punctuation.terminator.statement.ts
>export using x = a;
 ^^^^^^
 source.ts meta.var.expr.ts keyword.control.export.ts
       ^
       source.ts meta.var.expr.ts
        ^^^^^
        source.ts meta.var.expr.ts storage.type.ts
             ^
             source.ts meta.var.expr.ts
              ^
              source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
               ^
               source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
                ^
                source.ts meta.var.expr.ts keyword.operator.assignment.ts
                 ^
                 source.ts meta.var.expr.ts
                  ^
                  source.ts meta.var.expr.ts variable.other.readwrite.ts
                   ^
                   source.ts punctuation.terminator.statement.ts
>
 ^
 source.ts
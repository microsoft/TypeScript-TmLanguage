original file
-----------------------------------
//Test For Scopes

import * as req from "./Required"
import { Scale } from "./scale";

if (object.instanceof(ClassNew)) {
}

class class1(){
	static functioname(){

	}
}

export class className(){
	private state = { }
}

void newFunctionName(){

	var c = a + b;

	switch (someNum) {
		case 1: break;
		case 2: break;
		default: break;
	} 

}

/**
 * Verify comments
 */

module M {
    export function myFun(x: number) {
        return x;
    }
}

var m: typeof M = M;

var adder = new Adder(3, 4);
delete (adder)

var s = typeof {}git 
interface I {}
var j: I = {}


module Body {
    export class Cell {
        public parent: Cell;

        constructor(parent: Cell) {
            this.parent = parent;
            if (typeof parent === 'object' || parent instanceof Error) {
            	
            }
        }
    }
}

/*

  End of file

*/
-----------------------------------

Grammar: TypeScript.tmLanguage
-----------------------------------
>//Test For Scopes
 ^^
 source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
   ^^^^^^^^^^^^^^^
   source.ts comment.line.double-slash.ts
>
 ^
 source.ts
>import * as req from "./Required"
 ^^^^^^
 source.ts meta.import.ts keyword.control.import.ts
       ^
       source.ts meta.import.ts
        ^
        source.ts meta.import.ts constant.language.import-export-all.ts
         ^
         source.ts meta.import.ts
          ^^
          source.ts meta.import.ts keyword.control.as.ts
            ^
            source.ts meta.import.ts
             ^^^
             source.ts meta.import.ts variable.other.readwrite.alias.ts
                ^
                source.ts meta.import.ts
                 ^^^^
                 source.ts meta.import.ts keyword.control.from.ts
                     ^
                     source.ts meta.import.ts
                      ^
                      source.ts meta.import.ts string.quoted.double.ts punctuation.definition.string.begin.ts
                       ^^^^^^^^^^
                       source.ts meta.import.ts string.quoted.double.ts
                                 ^
                                 source.ts meta.import.ts string.quoted.double.ts punctuation.definition.string.end.ts
>import { Scale } from "./scale";
 ^^^^^^
 source.ts meta.import.ts keyword.control.import.ts
       ^
       source.ts meta.import.ts
        ^
        source.ts meta.import.ts meta.block.ts punctuation.definition.block.ts
         ^
         source.ts meta.import.ts meta.block.ts
          ^^^^^
          source.ts meta.import.ts meta.block.ts variable.other.readwrite.alias.ts
               ^
               source.ts meta.import.ts meta.block.ts
                ^
                source.ts meta.import.ts meta.block.ts punctuation.definition.block.ts
                 ^
                 source.ts meta.import.ts
                  ^^^^
                  source.ts meta.import.ts keyword.control.from.ts
                      ^
                      source.ts meta.import.ts
                       ^
                       source.ts meta.import.ts string.quoted.double.ts punctuation.definition.string.begin.ts
                        ^^^^^^^
                        source.ts meta.import.ts string.quoted.double.ts
                               ^
                               source.ts meta.import.ts string.quoted.double.ts punctuation.definition.string.end.ts
                                ^
                                source.ts punctuation.terminator.statement.ts
>
 ^
 source.ts
>if (object.instanceof(ClassNew)) {
 ^^
 source.ts keyword.control.conditional.ts
   ^
   source.ts
    ^
    source.ts meta.brace.round.ts
     ^^^^^^
     source.ts meta.function-call.ts variable.other.object.ts
           ^
           source.ts meta.function-call.ts punctuation.accessor.ts
            ^^^^^^^^^^
            source.ts meta.function-call.ts entity.name.function.ts
                      ^
                      source.ts meta.brace.round.ts
                       ^^^^^^^^
                       source.ts variable.other.readwrite.ts
                               ^
                               source.ts meta.brace.round.ts
                                ^
                                source.ts meta.brace.round.ts
                                 ^
                                 source.ts
                                  ^
                                  source.ts meta.block.ts punctuation.definition.block.ts
>}
 ^
 source.ts meta.block.ts punctuation.definition.block.ts
>
 ^
 source.ts
>class class1(){
 ^^^^^
 source.ts meta.class.ts storage.type.class.ts
      ^
      source.ts meta.class.ts
       ^^^^^^
       source.ts meta.class.ts entity.name.type.class.ts
             ^^
             source.ts meta.class.ts
               ^
               source.ts meta.class.ts punctuation.definition.block.ts
>	static functioname(){
 ^
 source.ts meta.class.ts
  ^^^^^^
  source.ts meta.class.ts storage.modifier.ts
        ^
        source.ts meta.class.ts
         ^^^^^^^^^^^
         source.ts meta.class.ts meta.method.declaration.ts meta.definition.method.ts entity.name.function.ts
                    ^
                    source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                     ^
                     source.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                      ^
                      source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
>
 ^
 source.ts meta.class.ts meta.method.declaration.ts meta.block.ts
>	}
 ^
 source.ts meta.class.ts meta.method.declaration.ts meta.block.ts
  ^
  source.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
>}
 ^
 source.ts meta.class.ts punctuation.definition.block.ts
>
 ^
 source.ts
>export class className(){
 ^^^^^^
 source.ts meta.class.ts keyword.control.export.ts
       ^
       source.ts meta.class.ts
        ^^^^^
        source.ts meta.class.ts storage.type.class.ts
             ^
             source.ts meta.class.ts
              ^^^^^^^^^
              source.ts meta.class.ts entity.name.type.class.ts
                       ^^
                       source.ts meta.class.ts
                         ^
                         source.ts meta.class.ts punctuation.definition.block.ts
>	private state = { }
 ^
 source.ts meta.class.ts
  ^^^^^^^
  source.ts meta.class.ts storage.modifier.ts
         ^
         source.ts meta.class.ts meta.field.declaration.ts
          ^^^^^
          source.ts meta.class.ts meta.field.declaration.ts meta.definition.property.ts variable.object.property.ts
               ^
               source.ts meta.class.ts meta.field.declaration.ts
                ^
                source.ts meta.class.ts meta.field.declaration.ts keyword.operator.assignment.ts
                 ^
                 source.ts meta.class.ts meta.field.declaration.ts
                  ^
                  source.ts meta.class.ts meta.field.declaration.ts meta.objectliteral.ts punctuation.definition.block.ts
                   ^
                   source.ts meta.class.ts meta.field.declaration.ts meta.objectliteral.ts
                    ^
                    source.ts meta.class.ts meta.field.declaration.ts meta.objectliteral.ts punctuation.definition.block.ts
>}
 ^
 source.ts meta.class.ts punctuation.definition.block.ts
>
 ^
 source.ts
>void newFunctionName(){
 ^^^^
 source.ts keyword.operator.expression.void.ts
     ^
     source.ts
      ^^^^^^^^^^^^^^^
      source.ts meta.function-call.ts entity.name.function.ts
                     ^
                     source.ts meta.brace.round.ts
                      ^
                      source.ts meta.brace.round.ts
                       ^
                       source.ts meta.block.ts punctuation.definition.block.ts
>
 ^
 source.ts meta.block.ts
>	var c = a + b;
 ^
 source.ts meta.block.ts
  ^^^
  source.ts meta.block.ts meta.var.expr.ts storage.type.ts
     ^
     source.ts meta.block.ts meta.var.expr.ts
      ^
      source.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.readwrite.ts
       ^
       source.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
        ^
        source.ts meta.block.ts meta.var.expr.ts keyword.operator.assignment.ts
         ^
         source.ts meta.block.ts meta.var.expr.ts
          ^
          source.ts meta.block.ts meta.var.expr.ts variable.other.readwrite.ts
           ^
           source.ts meta.block.ts meta.var.expr.ts
            ^
            source.ts meta.block.ts meta.var.expr.ts keyword.operator.arithmetic.ts
             ^
             source.ts meta.block.ts meta.var.expr.ts
              ^
              source.ts meta.block.ts meta.var.expr.ts variable.other.readwrite.ts
               ^
               source.ts meta.block.ts punctuation.terminator.statement.ts
>
 ^
 source.ts meta.block.ts
>	switch (someNum) {
 ^
 source.ts meta.block.ts
  ^^^^^^
  source.ts meta.block.ts switch-statement.expr.ts switch-expression.expr.ts keyword.control.switch.ts
        ^
        source.ts meta.block.ts switch-statement.expr.ts switch-expression.expr.ts
         ^
         source.ts meta.block.ts switch-statement.expr.ts switch-expression.expr.ts meta.brace.round.ts
          ^^^^^^^
          source.ts meta.block.ts switch-statement.expr.ts switch-expression.expr.ts variable.other.readwrite.ts
                 ^
                 source.ts meta.block.ts switch-statement.expr.ts switch-expression.expr.ts meta.brace.round.ts
                  ^
                  source.ts meta.block.ts switch-statement.expr.ts
                   ^
                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.definition.block.ts
>		case 1: break;
 ^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
   ^^^^
   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
       ^
       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts
        ^
        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts constant.numeric.decimal.ts
         ^
         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
          ^
          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
           ^^^^^
           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                ^
                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
>		case 2: break;
 ^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
   ^^^^
   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
       ^
       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts
        ^
        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts constant.numeric.decimal.ts
         ^
         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
          ^
          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
           ^^^^^
           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                ^
                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
>		default: break;
 ^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
   ^^^^^^^
   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.switch.ts
          ^
          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts punctuation.definition.section.case-statement.ts
           ^
           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
            ^^^^^
            source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.loop.ts
                 ^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts punctuation.terminator.statement.ts
>	} 
 ^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
  ^
  source.ts meta.block.ts switch-statement.expr.ts punctuation.definition.block.ts
   ^^
   source.ts meta.block.ts
>
 ^
 source.ts meta.block.ts
>}
 ^
 source.ts meta.block.ts punctuation.definition.block.ts
>
 ^
 source.ts
>/**
 ^^^
 source.ts comment.block.documentation.ts punctuation.definition.comment.ts
> * Verify comments
 ^^
 source.ts comment.block.documentation.ts comment.block.documentation.body.ts
   ^^^^^^^^^^^^^^^^^
   source.ts comment.block.documentation.ts comment.block.documentation.body.ts
> */
 ^
 source.ts comment.block.documentation.ts
  ^^
  source.ts comment.block.documentation.ts punctuation.definition.comment.ts
>
 ^
 source.ts
>module M {
 ^^^^^^
 source.ts meta.namespace.declaration.ts storage.type.namespace.ts
       ^
       source.ts meta.namespace.declaration.ts
        ^
        source.ts meta.namespace.declaration.ts entity.name.type.module.ts
         ^
         source.ts meta.namespace.declaration.ts
          ^
          source.ts meta.namespace.declaration.ts meta.block.ts punctuation.definition.block.ts
>    export function myFun(x: number) {
 ^^^^
 source.ts meta.namespace.declaration.ts meta.block.ts
     ^^^^^^
     source.ts meta.namespace.declaration.ts meta.block.ts meta.function.ts keyword.control.export.ts
           ^
           source.ts meta.namespace.declaration.ts meta.block.ts meta.function.ts
            ^^^^^^^^
            source.ts meta.namespace.declaration.ts meta.block.ts meta.function.ts storage.type.function.ts
                    ^
                    source.ts meta.namespace.declaration.ts meta.block.ts meta.function.ts
                     ^^^^^
                     source.ts meta.namespace.declaration.ts meta.block.ts meta.function.ts meta.definition.function.ts entity.name.function.ts
                          ^
                          source.ts meta.namespace.declaration.ts meta.block.ts meta.function.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                           ^
                           source.ts meta.namespace.declaration.ts meta.block.ts meta.function.ts meta.parameters.ts variable.parameter.ts
                            ^
                            source.ts meta.namespace.declaration.ts meta.block.ts meta.function.ts meta.parameters.ts meta.type.annotation.ts keyword.operator.type.annotation.ts
                             ^
                             source.ts meta.namespace.declaration.ts meta.block.ts meta.function.ts meta.parameters.ts meta.type.annotation.ts
                              ^^^^^^
                              source.ts meta.namespace.declaration.ts meta.block.ts meta.function.ts meta.parameters.ts meta.type.annotation.ts support.type.primitive.ts
                                    ^
                                    source.ts meta.namespace.declaration.ts meta.block.ts meta.function.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                                     ^
                                     source.ts meta.namespace.declaration.ts meta.block.ts meta.function.ts
                                      ^
                                      source.ts meta.namespace.declaration.ts meta.block.ts meta.function.ts meta.block.ts punctuation.definition.block.ts
>        return x;
 ^^^^^^^^
 source.ts meta.namespace.declaration.ts meta.block.ts meta.function.ts meta.block.ts
         ^^^^^^
         source.ts meta.namespace.declaration.ts meta.block.ts meta.function.ts meta.block.ts keyword.control.flow.ts
               ^
               source.ts meta.namespace.declaration.ts meta.block.ts meta.function.ts meta.block.ts
                ^
                source.ts meta.namespace.declaration.ts meta.block.ts meta.function.ts meta.block.ts variable.other.readwrite.ts
                 ^
                 source.ts meta.namespace.declaration.ts meta.block.ts meta.function.ts meta.block.ts punctuation.terminator.statement.ts
>    }
 ^^^^
 source.ts meta.namespace.declaration.ts meta.block.ts meta.function.ts meta.block.ts
     ^
     source.ts meta.namespace.declaration.ts meta.block.ts meta.function.ts meta.block.ts punctuation.definition.block.ts
>}
 ^
 source.ts meta.namespace.declaration.ts meta.block.ts punctuation.definition.block.ts
>
 ^
 source.ts
>var m: typeof M = M;
 ^^^
 source.ts meta.var.expr.ts storage.type.ts
    ^
    source.ts meta.var.expr.ts
     ^
     source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.readwrite.ts
      ^
      source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts keyword.operator.type.annotation.ts
       ^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts
        ^^^^^^
        source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts keyword.operator.expression.typeof.ts
              ^
              source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts
               ^
               source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts variable.other.constant.ts
                ^
                source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts
                 ^
                 source.ts meta.var.expr.ts keyword.operator.assignment.ts
                  ^
                  source.ts meta.var.expr.ts
                   ^
                   source.ts meta.var.expr.ts variable.other.constant.ts
                    ^
                    source.ts punctuation.terminator.statement.ts
>
 ^
 source.ts
>var adder = new Adder(3, 4);
 ^^^
 source.ts meta.var.expr.ts storage.type.ts
    ^
    source.ts meta.var.expr.ts
     ^^^^^
     source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.readwrite.ts
          ^
          source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
           ^
           source.ts meta.var.expr.ts keyword.operator.assignment.ts
            ^
            source.ts meta.var.expr.ts
             ^^^
             source.ts meta.var.expr.ts new.expr.ts keyword.operator.new.ts
                ^
                source.ts meta.var.expr.ts new.expr.ts
                 ^^^^^
                 source.ts meta.var.expr.ts new.expr.ts meta.function-call.ts entity.name.function.ts
                      ^
                      source.ts meta.var.expr.ts new.expr.ts meta.brace.round.ts
                       ^
                       source.ts meta.var.expr.ts new.expr.ts constant.numeric.decimal.ts
                        ^
                        source.ts meta.var.expr.ts new.expr.ts punctuation.separator.comma.ts
                         ^
                         source.ts meta.var.expr.ts new.expr.ts
                          ^
                          source.ts meta.var.expr.ts new.expr.ts constant.numeric.decimal.ts
                           ^
                           source.ts meta.var.expr.ts new.expr.ts meta.brace.round.ts
                            ^
                            source.ts punctuation.terminator.statement.ts
>delete (adder)
 ^^^^^^
 source.ts keyword.operator.expression.delete.ts
       ^
       source.ts
        ^
        source.ts meta.brace.round.ts
         ^^^^^
         source.ts variable.other.readwrite.ts
              ^
              source.ts meta.brace.round.ts
>
 ^
 source.ts
>var s = typeof {}git 
 ^^^
 source.ts meta.var.expr.ts storage.type.ts
    ^
    source.ts meta.var.expr.ts
     ^
     source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.readwrite.ts
      ^
      source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
       ^
       source.ts meta.var.expr.ts keyword.operator.assignment.ts
        ^
        source.ts meta.var.expr.ts
         ^^^^^^
         source.ts meta.var.expr.ts keyword.operator.expression.typeof.ts
               ^
               source.ts meta.var.expr.ts
                ^
                source.ts meta.var.expr.ts meta.objectliteral.ts punctuation.definition.block.ts
                 ^
                 source.ts meta.var.expr.ts meta.objectliteral.ts punctuation.definition.block.ts
                  ^^^
                  source.ts meta.var.expr.ts variable.other.readwrite.ts
                     ^
                     source.ts meta.var.expr.ts
>interface I {}
 ^^^^^^^^^
 source.ts meta.interface.ts storage.type.interface.ts
          ^
          source.ts meta.interface.ts
           ^
           source.ts meta.interface.ts entity.name.type.interface.ts
            ^
            source.ts meta.interface.ts
             ^
             source.ts meta.interface.ts punctuation.definition.block.ts
              ^
              source.ts meta.interface.ts punctuation.definition.block.ts
>var j: I = {}
 ^^^
 source.ts meta.var.expr.ts storage.type.ts
    ^
    source.ts meta.var.expr.ts
     ^
     source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.readwrite.ts
      ^
      source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts keyword.operator.type.annotation.ts
       ^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts
        ^
        source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts entity.name.type.ts
         ^
         source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts
          ^
          source.ts meta.var.expr.ts keyword.operator.assignment.ts
           ^
           source.ts meta.var.expr.ts
            ^
            source.ts meta.var.expr.ts meta.objectliteral.ts punctuation.definition.block.ts
             ^
             source.ts meta.var.expr.ts meta.objectliteral.ts punctuation.definition.block.ts
>
 ^
 source.ts
>
 ^
 source.ts
>module Body {
 ^^^^^^
 source.ts meta.namespace.declaration.ts storage.type.namespace.ts
       ^
       source.ts meta.namespace.declaration.ts
        ^^^^
        source.ts meta.namespace.declaration.ts entity.name.type.module.ts
            ^
            source.ts meta.namespace.declaration.ts
             ^
             source.ts meta.namespace.declaration.ts meta.block.ts punctuation.definition.block.ts
>    export class Cell {
 ^^^^
 source.ts meta.namespace.declaration.ts meta.block.ts
     ^^^^^^
     source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts keyword.control.export.ts
           ^
           source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts
            ^^^^^
            source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts storage.type.class.ts
                 ^
                 source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts
                  ^^^^
                  source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts entity.name.type.class.ts
                      ^
                      source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts
                       ^
                       source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts punctuation.definition.block.ts
>        public parent: Cell;
 ^^^^^^^^
 source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts
         ^^^^^^
         source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts storage.modifier.ts
               ^
               source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.field.declaration.ts
                ^^^^^^
                source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.field.declaration.ts meta.definition.property.ts variable.object.property.ts
                      ^
                      source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.field.declaration.ts meta.type.annotation.ts keyword.operator.type.annotation.ts
                       ^
                       source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.field.declaration.ts meta.type.annotation.ts
                        ^^^^
                        source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.field.declaration.ts meta.type.annotation.ts entity.name.type.ts
                            ^
                            source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts punctuation.terminator.statement.ts
>
 ^
 source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts
>        constructor(parent: Cell) {
 ^^^^^^^^
 source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts
         ^^^^^^^^^^^
         source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts storage.type.ts
                    ^
                    source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                     ^^^^^^
                     source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts variable.parameter.ts
                           ^
                           source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts meta.type.annotation.ts keyword.operator.type.annotation.ts
                            ^
                            source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts meta.type.annotation.ts
                             ^^^^
                             source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts meta.type.annotation.ts entity.name.type.ts
                                 ^
                                 source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                                  ^
                                  source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts
                                   ^
                                   source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
>            this.parent = parent;
 ^^^^^^^^^^^^
 source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts
             ^^^^
             source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts variable.language.this.ts
                 ^
                 source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.accessor.ts
                  ^^^^^^
                  source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts support.variable.property.dom.ts
                        ^
                        source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts
                         ^
                         source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.operator.assignment.ts
                          ^
                          source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts
                           ^^^^^^
                           source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts variable.other.readwrite.ts
                                 ^
                                 source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.terminator.statement.ts
>            if (typeof parent === 'object' || parent instanceof Error) {
 ^^^^^^^^^^^^
 source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts
             ^^
             source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.control.conditional.ts
               ^
               source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts
                ^
                source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.brace.round.ts
                 ^^^^^^
                 source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.operator.expression.typeof.ts
                       ^
                       source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts
                        ^^^^^^
                        source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts variable.other.readwrite.ts
                              ^
                              source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts
                               ^^^
                               source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.operator.comparison.ts
                                  ^
                                  source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts
                                   ^
                                   source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts string.quoted.single.ts punctuation.definition.string.begin.ts
                                    ^^^^^^
                                    source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts string.quoted.single.ts
                                          ^
                                          source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts string.quoted.single.ts punctuation.definition.string.end.ts
                                           ^
                                           source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts
                                            ^^
                                            source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.operator.logical.ts
                                              ^
                                              source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts
                                               ^^^^^^
                                               source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts variable.other.readwrite.ts
                                                     ^
                                                     source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts
                                                      ^^^^^^^^^^
                                                      source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts keyword.operator.expression.instanceof.ts
                                                                ^
                                                                source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts
                                                                 ^^^^^
                                                                 source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts entity.name.type.ts
                                                                      ^
                                                                      source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.brace.round.ts
                                                                       ^
                                                                       source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts
                                                                        ^
                                                                        source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.block.ts punctuation.definition.block.ts
>            	
 ^^^^^^^^^^^^^^
 source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.block.ts
>            }
 ^^^^^^^^^^^^
 source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.block.ts
             ^
             source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts meta.block.ts punctuation.definition.block.ts
>        }
 ^^^^^^^^
 source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts
         ^
         source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts meta.method.declaration.ts meta.block.ts punctuation.definition.block.ts
>    }
 ^^^^
 source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts
     ^
     source.ts meta.namespace.declaration.ts meta.block.ts meta.class.ts punctuation.definition.block.ts
>}
 ^
 source.ts meta.namespace.declaration.ts meta.block.ts punctuation.definition.block.ts
>
 ^
 source.ts
>/*
 ^^
 source.ts comment.block.ts punctuation.definition.comment.ts
>
 ^
 source.ts comment.block.ts
>  End of file
 ^^^^^^^^^^^^^^
 source.ts comment.block.ts
>
 ^
 source.ts comment.block.ts
>*/
 ^^
 source.ts comment.block.ts punctuation.definition.comment.ts